<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/unix/</link>
    <description>Recent content in unix on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 09 Sep 2023 09:46:53 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash工具：从文件中获取第N行</title>
      <link>https://www.techdocdb.com/posts/bash%E5%B7%A5%E5%85%B7%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%AC%ACn%E8%A1%8C/</link>
      <pubDate>Sat, 09 Sep 2023 09:46:53 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/bash%E5%B7%A5%E5%85%B7%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%AC%ACn%E8%A1%8C/</guid>
      <description>
        
          
            摘要 本文介绍了一种在Bash中提取文件中特定行（或一系列行）的方法。通过使用head和tail命令、sed以及其他一些工具，可以实现此功能。本文还讨论了在处理大文件时各种方法的性能。
内容 如果想要从文件中提取特定行，可以使用以下方法之一：
使用head和tail命令：可以将head -n+N和tail -1命令组合使用来提取第N行。例如，head -7 file.txt | tail -1将打印文件的第7行。 使用sed命令：可以使用sed &#39;NUMq;d&#39; file命令来提取第N行。例如，sed &#39;7q;d&#39; file.txt将打印文件的第7行。 使用awk命令：可以使用awk &#39;NR == N {print; exit}&#39; file命令来提取第N行。例如，awk &#39;NR == 7 {print; exit}&#39; file.txt将打印文件的第7行。 使用perl命令：可以使用perl -wnl -e &#39;$. == N &amp;amp;&amp;amp; print &amp;amp;&amp;amp; exit;&#39; file命令来提取第N行。例如，perl -wnl -e &#39;$. == 7 &amp;amp;&amp;amp; print &amp;amp;&amp;amp; exit;&#39; file.txt将打印文件的第7行。 以上是常见的用于提取文件中特定行的方法。这些方法在处理小文件时的性能相差不大，但在处理大文件时可能会有所不同。根据我的测试结果，head | tail方法和sed方法的性能相对较好。
总结 通过使用head和tail命令、sed命令、awk命令或perl命令，可以从文件中提取特定行。在处理大文件时，推荐使用tail | head方法或sed方法，因为它们的性能较好。但需要注意的是，对于较大的文件，执行这些操作可能需要一些时间。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在命令行中对 diff 进行着色</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E5%AF%B9-diff-%E8%BF%9B%E8%A1%8C%E7%9D%80%E8%89%B2/</link>
      <pubDate>Thu, 07 Sep 2023 17:00:01 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E5%AF%B9-diff-%E8%BF%9B%E8%A1%8C%E7%9D%80%E8%89%B2/</guid>
      <description>
        
          
            摘要 本教程将向你展示如何对 diff 进行着色，以便在命令行中更好地显示。通过为 diff 添加颜色，可以增加可读性和易用性。
内容 当你需要比较两个文件的差异时，你可以使用 diff 命令。然而，默认情况下，diff 的输出通常是以纯文本的形式显示的，不易阅读。为了改善这种情况，我们可以通过为 diff 添加颜色，使其在命令行中以更好的方式呈现。
下面是几种在命令行中对 diff 进行着色的方法：
1. 使用 colordiff 命令 colordiff 是 diff 的一个包装器，它以与 diff 相同的格式显示输出，但使用彩色语法高亮增加可读性。你可以通过以下命令安装 colordiff：
1sudo apt-get install colordiff 安装后，你可以使用以下命令显示着色的 diff：
1diff file_a file_b | colordiff 或者：
1colordiff file_a file_b 2. 使用 Vim 或 VimDiff Vim 是一个功能强大的文本编辑器，可以用于显示 diff 的差异。你可以使用以下命令来显示差异：
1diff file_a file_b | vim -R - 或者使用 VimDiff（也可以使用 &#39;vim -d&#39; 来代替）以并排显示两个文件的差异：
1vimdiff file_a file_b 3. 使用 grc 命令 grc（Generic Colouriser）是一个通用的颜色着色工具，可以为多个命令的输出添加颜色，包括 diff。grc 是一个 Python 脚本，可以包装任何命令。所以，你可以使用以下命令来显示着色的 diff：
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Shell脚本中进行逻辑OR运算的方法</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%80%BB%E8%BE%91or%E8%BF%90%E7%AE%97%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 07 Sep 2023 16:00:48 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%80%BB%E8%BE%91or%E8%BF%90%E7%AE%97%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在Shell脚本中进行逻辑OR运算。我们将讨论几种不同的方法，并提供具体的代码示例和说明。
内容 在Shell脚本中，有几种方式可以执行逻辑OR运算。以下是常用的方法：
使用||运算符：
使用 || 运算符可以在条件语句中执行逻辑OR运算。如果条件中的任一表达式为真，则整个条件为真。
1if [ &amp;#34;$#&amp;#34; -eq 0 ] || [ &amp;#34;$#&amp;#34; -gt 1 ] ; then 2 echo &amp;#34;hello&amp;#34; 3fi 使用 -o 或 -or：
使用 -o 或 -or 运算符也可以执行逻辑OR运算。如果条件中的任一表达式为真，则整个条件为真。
1if [ &amp;#34;$#&amp;#34; -eq 0 -o &amp;#34;$#&amp;#34; -gt 1 ] ; then 2 echo &amp;#34;hello&amp;#34; 3fi 使用 [[ ... ]]：
使用 [[ ... ]] 来包含条件语句，可以执行逻辑OR运算。与方括号 [ ... ] 不同，双方括号支持更多的逻辑操作符。
1if [[ &amp;#34;$#&amp;#34; -eq 0 || &amp;#34;$#&amp;#34; -gt 1 ]] ; then 2 echo &amp;#34;hello&amp;#34; 3fi 以上是在Shell脚本中执行逻辑OR运算的几种常见方法。根据具体的场景和需求，选择适合的方法来实现逻辑OR运算。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在更改 crontab 文件后需要重启 cron 服务吗？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8%E6%9B%B4%E6%94%B9-crontab-%E6%96%87%E4%BB%B6%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF-cron-%E6%9C%8D%E5%8A%A1%E5%90%97/</link>
      <pubDate>Fri, 25 Aug 2023 10:49:37 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8%E6%9B%B4%E6%94%B9-crontab-%E6%96%87%E4%BB%B6%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF-cron-%E6%9C%8D%E5%8A%A1%E5%90%97/</guid>
      <description>
        
          
            摘要 本教程将介绍在更改 crontab 文件后是否需要重启 cron 服务。我们将提供示例代码来说明这个问题。
内容 在更改 crontab 文件后，无需重启 cron 服务。根据 cron 的官方文档：
&amp;quot;...cron 会检查所有 crontab 文件的修改时间，并重新加载已更改的文件。因此，在修改 crontab 文件时无需重启 cron 服务。&amp;quot;
如果你确实希望执行重启操作，可以使用以下命令：
1sudo service cron reload 或者
1/etc/init.d/cron reload 总结 根据 cron 官方文档的说明，无需在更改 crontab 文件后重启 cron 服务。然而，如果你希望确保更改生效，可以执行一次重启 cron 服务的操作。请注意，重启 cron 服务可能会导致某些系统上的其他影响，所以在执行之前请确保了解这些影响。
          
          
        
      </description>
    </item>
    
    <item>
      <title>为什么1970年1月1日是“纪元时间”？</title>
      <link>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%881970%E5%B9%B41%E6%9C%881%E6%97%A5%E6%98%AF%E7%BA%AA%E5%85%83%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 25 Aug 2023 07:28:40 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%881970%E5%B9%B41%E6%9C%881%E6%97%A5%E6%98%AF%E7%BA%AA%E5%85%83%E6%97%B6%E9%97%B4/</guid>
      <description>
        
          
            摘要 本教程将解释为什么1970年1月1日被视为&amp;quot;纪元时间&amp;quot;。我们将讨论纪元时间的起源和为什么选择了1970年1月1日作为纪元时间。
内容 1970年1月1日被称为&amp;quot;纪元时间&amp;quot;，是因为早期的Unix系统在度量系统时间时以每秒60次的速率递增32位无符号整数。这意味着32位无符号整数只能表示不到829天的时间范围。因此，将数字0（称为&amp;quot;纪元&amp;quot;）所代表的时间设置在不久之前。考虑到这是在1970年代早期，纪元时间被设置为1971年1月1日。
后来，系统时间改为以每秒递增一次，这将32位无符号整数所能表示的时间范围增加到约136年。由于不再需要将每一秒都纳入计数器中，纪元时间被舍入到最近的十年，因此变成了1970年1月1日。可以认为，这样比设置为1971年1月1日更加整洁。
需要注意的是，使用以1970年1月1日为纪元的32位有符号整数可以表示的日期最多可到2038年1月19日，到达此日期后将返回到1901年12月13日。
总结 1970年1月1日被选择为&amp;quot;纪元时间&amp;quot;是因为早期的Unix系统以每秒60次的速率递增32位无符号整数。后来，系统时间的改变使得32位无符号整数能够表示更长的时间范围。纪元时间的选择是为了使系统更加整洁，并提供更大的灵活性。因此，1970年1月1日成为了计时的起点。纪元时间是计算机系统中重要的时间参考点之一，并被广泛应用于各种编程和系统领域。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
