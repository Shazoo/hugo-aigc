<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/unix/</link>
    <description>Recent content in unix on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 25 Aug 2023 10:49:37 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在更改 crontab 文件后需要重启 cron 服务吗？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8%E6%9B%B4%E6%94%B9-crontab-%E6%96%87%E4%BB%B6%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF-cron-%E6%9C%8D%E5%8A%A1%E5%90%97/</link>
      <pubDate>Fri, 25 Aug 2023 10:49:37 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8%E6%9B%B4%E6%94%B9-crontab-%E6%96%87%E4%BB%B6%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF-cron-%E6%9C%8D%E5%8A%A1%E5%90%97/</guid>
      <description>
        
          
            摘要 本教程将介绍在更改 crontab 文件后是否需要重启 cron 服务。我们将提供示例代码来说明这个问题。
内容 在更改 crontab 文件后，无需重启 cron 服务。根据 cron 的官方文档：
&amp;quot;...cron 会检查所有 crontab 文件的修改时间，并重新加载已更改的文件。因此，在修改 crontab 文件时无需重启 cron 服务。&amp;quot;
如果你确实希望执行重启操作，可以使用以下命令：
1sudo service cron reload 或者
1/etc/init.d/cron reload 总结 根据 cron 官方文档的说明，无需在更改 crontab 文件后重启 cron 服务。然而，如果你希望确保更改生效，可以执行一次重启 cron 服务的操作。请注意，重启 cron 服务可能会导致某些系统上的其他影响，所以在执行之前请确保了解这些影响。
          
          
        
      </description>
    </item>
    
    <item>
      <title>为什么1970年1月1日是“纪元时间”？</title>
      <link>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%881970%E5%B9%B41%E6%9C%881%E6%97%A5%E6%98%AF%E7%BA%AA%E5%85%83%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 25 Aug 2023 07:28:40 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%881970%E5%B9%B41%E6%9C%881%E6%97%A5%E6%98%AF%E7%BA%AA%E5%85%83%E6%97%B6%E9%97%B4/</guid>
      <description>
        
          
            摘要 本教程将解释为什么1970年1月1日被视为&amp;quot;纪元时间&amp;quot;。我们将讨论纪元时间的起源和为什么选择了1970年1月1日作为纪元时间。
内容 1970年1月1日被称为&amp;quot;纪元时间&amp;quot;，是因为早期的Unix系统在度量系统时间时以每秒60次的速率递增32位无符号整数。这意味着32位无符号整数只能表示不到829天的时间范围。因此，将数字0（称为&amp;quot;纪元&amp;quot;）所代表的时间设置在不久之前。考虑到这是在1970年代早期，纪元时间被设置为1971年1月1日。
后来，系统时间改为以每秒递增一次，这将32位无符号整数所能表示的时间范围增加到约136年。由于不再需要将每一秒都纳入计数器中，纪元时间被舍入到最近的十年，因此变成了1970年1月1日。可以认为，这样比设置为1971年1月1日更加整洁。
需要注意的是，使用以1970年1月1日为纪元的32位有符号整数可以表示的日期最多可到2038年1月19日，到达此日期后将返回到1901年12月13日。
总结 1970年1月1日被选择为&amp;quot;纪元时间&amp;quot;是因为早期的Unix系统以每秒60次的速率递增32位无符号整数。后来，系统时间的改变使得32位无符号整数能够表示更长的时间范围。纪元时间的选择是为了使系统更加整洁，并提供更大的灵活性。因此，1970年1月1日成为了计时的起点。纪元时间是计算机系统中重要的时间参考点之一，并被广泛应用于各种编程和系统领域。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
