<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/mysql/</link>
    <description>Recent content in mysql on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 08:41:01 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在MySQL中查找重复记录</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 11 Sep 2023 08:41:01 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在MySQL数据库中查找重复记录。我们将提供多种方法来找出重复记录，并给出相应的查询示例。
内容 在MySQL中查找重复记录可以采用以下多种方法：
使用GROUP BY和HAVING子句：通过使用GROUP BY子句按特定字段进行分组，并使用HAVING子句对分组进行筛选，可以找出重复记录。例如： 1SELECT address, COUNT(id) as cnt FROM list 2GROUP BY address HAVING cnt &amp;gt; 1; 使用子查询和JOIN操作：编写一个子查询，找出重复的字段，然后使用JOIN操作将其与原始表连接，可以获取包含重复记录的完整行。例如： 1SELECT t1.firstname, t1.lastname, t1.address 2FROM list AS t1 3INNER JOIN ( 4 SELECT address 5 FROM list 6 GROUP BY address 7 HAVING COUNT(id) &amp;gt; 1 8) t2 ON t1.address = t2.address; 使用WHERE子句和子查询：在WHERE子句中编写一个子查询，根据某个字段出现的次数进行筛选，可以找出重复记录。例如： 1SELECT * 2FROM list AS outer 3WHERE ( 4 SELECT COUNT(*) 5 FROM list AS inner 6 WHERE inner.
          
          
        
      </description>
    </item>
    
    <item>
      <title>&lt;html&gt;</title>
      <link>https://www.techdocdb.com/posts/html/</link>
      <pubDate>Fri, 08 Sep 2023 10:26:49 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/html/</guid>
      <description>
        
          
            504 Gateway Time-out 504 Gateway Time-out nginx 
          
          
        
      </description>
    </item>
    
    <item>
      <title>在MySQL中如何进行区分大小写的字符串比较？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</link>
      <pubDate>Fri, 08 Sep 2023 01:20:11 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</guid>
      <description>
        
          
            摘要 本文介绍了在MySQL中如何进行区分大小写的字符串比较。
内容 有时候我们需要在MySQL中进行区分大小写的字符串比较。以下是几种实现区分大小写字符串比较的方法：
使用BINARY关键字
1SELECT * FROM `table` WHERE BINARY `column` = &amp;#39;value&amp;#39; 这个方法使用BINARY关键字对进行比较的列和值进行二进制比较，从而实现区分大小写的比较。
使用COLLATE关键字
1SELECT * FROM `table` WHERE `column` COLLATE utf8_bin = &amp;#39;value&amp;#39; 这个方法使用COLLATE关键字指定列和值的字符集和排序规则，从而实现区分大小写的比较。请将utf8_bin替换为您要使用的字符集和排序规则。
使用REGEXP_LIKE函数
1SELECT * FROM `table` WHERE REGEXP_LIKE(`column`, &amp;#39;value&amp;#39;, &amp;#39;c&amp;#39;) 这个方法使用REGEXP_LIKE函数进行区分大小写的正则表达式匹配。第三个参数指定了匹配类型为c，表示区分大小写的匹配。
请注意，在执行区分大小写的字符串比较时，请确保您的列和值都使用了正确的字符集和排序规则。
总结 本文介绍了在MySQL中进行区分大小写的字符串比较的方法。通过使用BINARY关键字、COLLATE关键字和REGEXP_LIKE函数，我们可以实现区分大小写的字符串比较。在处理需要区分大小写的字符串比较时，请选择适合的方法来满足您的需求。希望本文对您有所帮助，让您了解如何在MySQL中进行区分大小写的字符串比较。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在MySQL中基于SELECT查询进行UPDATE查询</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%9F%BA%E4%BA%8Eselect%E6%9F%A5%E8%AF%A2%E8%BF%9B%E8%A1%8Cupdate%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Thu, 07 Sep 2023 22:12:29 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%9F%BA%E4%BA%8Eselect%E6%9F%A5%E8%AF%A2%E8%BF%9B%E8%A1%8Cupdate%E6%9F%A5%E8%AF%A2/</guid>
      <description>
        
          
            摘要 本教程将讨论如何在MySQL中使用SELECT查询来执行基于条件的UPDATE查询，以及如何使用临时表来处理复杂的更新操作。
内容 在MySQL中，可以通过执行SELECT查询来执行基于条件的UPDATE查询。同时，使用临时表可以处理复杂的更新操作。
以下是一种方法，可以使用临时表来处理复杂的查询，并基于查询结果执行UPDATE查询：
创建临时表保存查询结果： 1CREATE TEMPORARY TABLE temp_table AS ( 2 SELECT column1, column2, ... 3 FROM table1 4 WHERE condition 5); 使用临时表来执行UPDATE查询： 1UPDATE table2 2JOIN temp_table ON table2.column = temp_table.column 3SET table2.column = temp_table.new_value; 这样，可以使用临时表来存储查询结果，并在UPDATE查询中引用临时表来更新目标表。
希望本教程对您有所帮助！
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何修改MySQL列以允许NULL值？</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9mysql%E5%88%97%E4%BB%A5%E5%85%81%E8%AE%B8null%E5%80%BC/</link>
      <pubDate>Wed, 06 Sep 2023 00:37:10 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9mysql%E5%88%97%E4%BB%A5%E5%85%81%E8%AE%B8null%E5%80%BC/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用MySQL语法修改表以允许列接受NULL值。我们将提供多种方法来实现这个目标，并给出示例代码。
内容 在MySQL中，要修改一个表以允许列接受NULL值，可以使用以下语法：
1ALTER TABLE 表名 MODIFY 列名 数据类型 NULL; 例如，要将列mycolumn的数据类型修改为VARCHAR(255)，并允许接受NULL值，可以使用以下代码：
1ALTER TABLE mytable MODIFY mycolumn VARCHAR(255) NULL; 在上述代码中，我们使用MODIFY关键字指定要修改的列和新的数据类型。使用NULL关键字将该列设置为可接受NULL值。
请注意，如果列未声明为UNIQUE或NOT NULL，则列在默认情况下就是可接受NULL值的，因此不需要进行任何特殊的修改。
总结 通过本教程，你了解了如何使用MySQL语法修改表以允许列接受NULL值。你可以使用MODIFY关键字指定要修改的列和新的数据类型，并使用NULL关键字将该列设置为可接受NULL值。这些方法可以帮助你根据需要灵活地修改表的列定义，以适应不同的数据需求。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在MySQL中使用JOIN ON和USING的区别是什么？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E4%BD%BF%E7%94%A8join-on%E5%92%8Cusing%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 29 Aug 2023 09:32:58 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E4%BD%BF%E7%94%A8join-on%E5%92%8Cusing%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>
        
          
            摘要 本教程将解释在MySQL中使用JOIN ON和USING的区别。我们将使用示例表和代码来说明问题和解决方案。
内容 在MySQL中，使用JOIN进行表连接时，可以使用ON和USING来指定连接条件。以下是对两者区别的简要描述：
ON用于更一般的表连接。可以使用单个列、多个列甚至条件来连接两个表。例如：
1SELECT * FROM table1 JOIN table2 ON table1.column = table2.column WHERE ... USING在两个表中共享相同名称的列用于连接时非常有用。在这种情况下，可以使用以下语法：
1SELECT ... FROM table1 JOIN table2 USING (column) 此外，使用USING时不需要完全限定连接列的名称。
通常情况下，ON和USING可以实现相同的结果。使用USING的一个好处是，查询结果中列名只出现一次，并且没有必要使用完全限定列名。但在某些情况下，由于连接列的名称不同或希望使用更复杂的连接条件，使用ON可能更合适。
总结 在MySQL中，使用JOIN进行表连接时，可以使用ON或USING指定连接条件。使用ON时可以更灵活地定义连接条件，而使用USING时可以更方便地处理相同名称的连接列。
相关链接 MySQL官方文档 - JOIN操作 MySQL官方文档 - SELECT语句 
          
          
        
      </description>
    </item>
    
    <item>
      <title>MySQL中 @variable 和 variable 有什么区别？</title>
      <link>https://www.techdocdb.com/posts/mysql%E4%B8%AD-@variable-%E5%92%8C-variable-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 25 Aug 2023 08:49:31 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/mysql%E4%B8%AD-@variable-%E5%92%8C-variable-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将介绍MySQL中 @variable 和 variable 之间的区别。我们将提供示例代码来说明这个问题。
内容 在MySQL中，@variable 表示一个用户定义的变量，你可以自定义变量名称。它们是松散类型的变量，在会话中可以初始化并保留其值，直到会话结束为止。
@variable 变量的前面带有 @ 符号，如 @var。你可以使用 SET 语句或在查询中初始化这个变量：
1SET @var = 1; 2 3SELECT @var2 := 2; 当你在MySQL中开发存储过程时，可以传递输入参数并声明局部变量：
1DELIMITER // 2 3CREATE PROCEDURE prc_test (var INT) 4BEGIN 5 DECLARE var2 INT; 6 SET var2 = 1; 7 SELECT var2; 8END; 9// 10 11DELIMITER ; 这些变量不需要任何前缀，并且仅在存储过程被调用时重新初始化，而会话特定的用户定义变量不会重新初始化。
总结 通过执行上述代码，你可以在MySQL中使用 @variable 和 variable 两种变量。@variable 是会话特定的用户定义变量，variable 是存储过程变量。它们在作用域和用途上有所不同。选择适合你需求的变量类型来进行 MySQL 编程，以提高代码的可读性和灵活性。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 MySQL 中临时禁用外键约束的方法</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8-mysql-%E4%B8%AD%E4%B8%B4%E6%97%B6%E7%A6%81%E7%94%A8%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 24 Aug 2023 14:57:45 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8-mysql-%E4%B8%AD%E4%B8%B4%E6%97%B6%E7%A6%81%E7%94%A8%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在 MySQL 中临时禁用约束。我们将使用示例代码来说明这个过程。
内容 在 MySQL 中，可以通过以下方法临时禁用约束：
使用DISABLE KEYS语句或 使用SET FOREIGN_KEY_CHECKS=0语句 在执行需要临时禁用约束的操作之前，使用其中一种方法来禁用约束。然后在操作完成后，再重新启用约束。
以下是示例代码：
1SET FOREIGN_KEY_CHECKS=0; 确保在操作完成后重新启用约束：
1SET FOREIGN_KEY_CHECKS=1; 总结 在 MySQL 中，可以使用DISABLE KEYS或SET FOREIGN_KEY_CHECKS=0语句来临时禁用外键约束。在需要临时禁用约束的操作前使用上述语句来禁用约束，操作完成后重新启用约束。使用这些方法，可以临时禁用约束来执行需要的操作，然后再恢复约束以确保数据的完整性。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
