<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/http/</link>
    <description>Recent content in http on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 06 Sep 2023 00:02:42 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>multipart/form-data中的boundary边界</title>
      <link>https://www.techdocdb.com/posts/multipart/form-data%E4%B8%AD%E7%9A%84boundary%E8%BE%B9%E7%95%8C/</link>
      <pubDate>Wed, 06 Sep 2023 00:02:42 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/multipart/form-data%E4%B8%AD%E7%9A%84boundary%E8%BE%B9%E7%95%8C/</guid>
      <description>
        
          
            摘要 本教程将介绍在multipart/form-data中边界（boundary）的概念。我们将讨论boundary在HTTP请求中的作用以及如何定义和使用boundary，并提供具体的代码示例和说明。
内容 在HTTP头部中，我们经常会看到类似以下的内容：Content-Type: multipart/form-data; boundary=???
那么这个&amp;quot;???&amp;quot;代表什么呢？它是由用户自定义的吗？还是由HTML生成的？我能否自定义这个&amp;quot;???&amp;quot;为&amp;quot;abcdefg&amp;quot;呢？
答案是，&amp;quot;???&amp;quot;可以由用户自定义。你可以使用任意值作为boundary，只需满足以下条件：它的长度不能超过70个字节，而且只能使用7位ASCII可打印字符。
当使用multipart/*类型的内容类型时，你实际上需要在Content-Type头部中指定boundary参数，这样服务器才能正确解析请求的内容。否则，服务器将无法解析请求负载。
除非你确信在负载中只使用了US-ASCII字符集，否则建议为每个部分的Content-Type头部中添加charset参数，并将其设置为UTF-8。
根据具体的需求和环境，选择合适的boundary值。以上方法都可以实现目标，在请求消息中保持一致地使用相同的boundary值，
参考文献：
使用MIME的多用途互联网邮件扩展（MIME）第二部分：媒体类型 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cache-Control中max-age=0和no-cache的区别</title>
      <link>https://www.techdocdb.com/posts/cache-control%E4%B8%ADmax-age0%E5%92%8Cno-cache%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 01 Sep 2023 07:03:25 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/cache-control%E4%B8%ADmax-age0%E5%92%8Cno-cache%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 在HTTP的Cache-Control头部中，max-age=0和no-cache具有相似的语义，都表示内容立即被认为是过期的，并且必须重新获取。本教程将解释这两个指令之间的区别，并提供一些使用示例。
解决方案 在理解max-age=0和no-cache之前，需要明确一些概念。Cache-Control头部有两个方面，一个是服务器（也称为“原始服务器”）可以发送的指令，另一个是浏览器（也称为“用户代理”）可以发送的指令。
由原始服务器发送的指令 首先，我们来看一下max-age=0在是源服务器端的含义。max-age=0告诉缓存（和用户代理）响应立即就是过期的，因此在使用缓存副本之前，它们应该重新验证响应（例如，使用If-Not-Modified头部）。而no-cache则告诉缓存它必须在使用缓存副本之前进行验证。根据RFC-2616的14.9.1节的规定：
no-cache的含义是...缓存不允许在没有成功与原始服务器重新验证的情况下使用响应来满足后续请求。这允许原始服务器禁止甚至配置为返回过期响应的缓存。
换句话说，缓存可能会选择使用过期的响应（尽管它们必须标记一个警告头部），但no-cache表示无论如何都不能使用过期的响应。对于包含订单信息的响应，你可能希望在点击刷新按钮时使用SHOULD重新验证的行为，但在为页面生成的棒球统计中使用MUST重新验证的行为。
然而，请注意你在评论中提到的，no-cache并不意味着不允许存储，当你在使用no-cache时，可能会遇到某些情况。在Cache Control指令解析页面上指出（我不能保证其准确性）：
实际上，IE和Firefox都已经开始将no-cache指令视为指示浏览器不要缓存页面。我注意到这种行为已经持续了一年多。我们怀疑这个变化是由于人们广泛（不正确地）使用这个指令来防止缓存。
此外，通过使用 Cache-Control: max-age=0, must-revalidate，你基本上可以实现与no-cache相同的功能。所以，这可能是一种在避免no-cache以及它似乎将no-cache迁移到做与no-store一样的事情（即完全不缓存）时获取MUST重新验证行为的方式。
由用户代理发送的指令 其次，我们来看一下max-age=0和no-cache在用户代理端的含义。如果用户代理发送一个带有 Cache-Control: max-age=0 的请求（即“端到端重新验证”），那么每个缓存都会根据需要重新验证其缓存条目，直到原始服务器。如果响应是304（未修改），则可以使用缓存的实体。而发送带有 Cache-Control: no-cache 的请求（即“端到端重新加载”），则不会执行重新验证，缓存不能在响应时使用缓存的副本。
总结 本教程解释了Cache-Control头部中max-age=0和no-cache之间的区别。当原始服务器发送这些指令时，max-age=0指示缓存在使用缓存的副本之前应该重新验证，而no-cache指示缓存必须重新验证。当用户代理发送这些指令时，max-age=0 指示缓存应该逐个验证缓存条目，直到原始服务器，而 no-cache 指示缓存不能在使用过期的副本时执行重新验证。根据实际需求和使用场景选择适合的指令，并根据需要添加其他指令以实现所需的行为。
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用 Fetch API 进行 GET 请求设置查询字符串</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8-fetch-api-%E8%BF%9B%E8%A1%8C-get-%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 24 Aug 2023 14:57:59 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8-fetch-api-%E8%BF%9B%E8%A1%8C-get-%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用 Fetch API 进行 GET 请求，并设置查询字符串。我们将使用示例代码来说明这个过程。
内容 使用 Fetch API 发起带有查询字符串的 GET 请求可以通过以下方式完成：
创建一个 URL 对象，并设置 URL 的基础地址。 使用 URL 的 searchParams 属性，设置查询参数。 使用 fetch 方法发送 GET 请求。 以下是一个示例代码：
1const url = new URL(&amp;#39;http://myapi.com/orders&amp;#39;); 2url.searchParams.set(&amp;#39;order_id&amp;#39;, &amp;#39;1&amp;#39;); 3fetch(url); 在上述示例中，我们首先创建一个 URL 对象，并设置其基础地址为&#39;http://myapi.com/orders&#39;。然后，通过设置URL对象的searchParams属性，将查询参数&#39;order_id&#39;设置为&#39;1&#39;。最后，使用fetch方法发送GET请求。
这种方式可以灵活地设置查询字符串，并且适用于任何有效的 URL 格式。
总结 使用 Fetch API 进行 GET 请求，并设置查询字符串可以用 URL 对象的 searchParams 属性来实现。首先，创建 URL 对象，并设置基础地址。然后，通过设置 URL 对象的 searchParams 属性，设置查询参数。最后，使用 fetch 方法发送 GET 请求。这种方式可以方便地设置和发送请求，并且可以适用于不同的 URL 和查询参数组合。
          
          
        
      </description>
    </item>
    
    <item>
      <title>301（永久重定向）和 302（临时重定向）的区别</title>
      <link>https://www.techdocdb.com/posts/301%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C-302%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 24 Aug 2023 13:23:10 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/301%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C-302%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将介绍 301 和 302 重定向的区别。我们将使用示例代码来说明这个概念。
内容 在 HTTP 协议中，301 代表永久重定向，而 302 代表临时重定向。这两种重定向有以下区别：
301 重定向表明所请求的资源已经分配了新的永久 URI，以后的所有引用都应该使用返回的 URI 之一。 302 重定向表明所请求的资源暂时位于其他 URI。 由于重定向可能会发生变化，客户端应继续使用原始的 URI 进行以后的请求。 以下是一些示例代码：
301 重定向示例： 1HTTP/1.1 301 Moved Permanently 2Location: http://example.com/new-page 在上述示例中，服务器返回了一个 301 状态码，并指示客户端将请求重定向到新的 URL（http://example.com/new-page）。客户端应该记住这个重定向，并在以后的请求中使用新的URL。
302 重定向示例： 1HTTP/1.1 302 Found 2Location: http://example.com/temp-page 在上述示例中，服务器返回了一个 302 状态码，并指示客户端将请求暂时重定向到另一个 URL（http://example.com/temp-page）。客户端应该继续使用原始URL进行以后的请求。
总结 在 HTTP 协议中，301 和 302 重定向有不同的含义。301 重定向表示所请求的资源已永久移动到新的位置，客户端应该使用新的位置；而 302 重定向表示所请求的资源暂时位于其他位置，客户端应继续使用原始位置。在根据不同的需求选择适当的重定向方式时，请记住这些区别。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
