<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>json on 技术分享站</title>
    <link>https://techdocdb.com/tags/json/</link>
    <description>Recent content in json on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 29 Aug 2023 05:56:04 +0800</lastBuildDate><atom:link href="https://techdocdb.com/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP中的shell_exec()和exec()命令的区别</title>
      <link>https://techdocdb.com/posts/php%E4%B8%AD%E7%9A%84shell_exec%E5%92%8Cexec%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 29 Aug 2023 05:56:04 +0800</pubDate>
      
      <guid>https://techdocdb.com/posts/php%E4%B8%AD%E7%9A%84shell_exec%E5%92%8Cexec%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将解释在PHP中使用的shell_exec()和exec()命令的区别。我们将提供示例代码，并讨论这两个命令的不同之处。
内容 在PHP中，shell_exec()和exec()都是用于执行外部命令的函数。它们之间的区别如下：
shell_exec()函数 shell_exec()函数执行外部命令，并将完整的输出作为字符串返回。这意味着它会获取命令的所有输出，而不仅仅是最后一行。
exec()函数 exec()函数执行外部命令，并返回输出的最后一行。它还可以通过可选参数接收命令的其他输出行。
示例代码 下面是使用shell_exec()和exec()的示例代码：
1$output1 = shell_exec(&amp;#39;ls&amp;#39;); 2var_dump($output1); // 返回完整的输出流作为字符串 3 4$output2 = exec(&amp;#39;ls&amp;#39;); 5var_dump($output2); // 返回输出的最后一行 总结 shell_exec()和exec()函数都是在PHP中执行外部命令的方法。区别在于shell_exec()会返回完整的输出流，而exec()只返回输出的最后一行。
参考链接 shell_exec() - PHP Manual exec() - PHP Manual 
          
          
        
      </description>
    </item>
    
    <item>
      <title>&#34;正确&#34;的JSON日期格式是什么？</title>
      <link>https://techdocdb.com/posts/%E6%AD%A3%E7%A1%AE%E7%9A%84json%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 28 Aug 2023 07:40:44 +0800</pubDate>
      
      <guid>https://techdocdb.com/posts/%E6%AD%A3%E7%A1%AE%E7%9A%84json%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>
        
          
            摘要 本教程将解答有关JSON日期格式的问题。我们将讨论不同的JSON日期表示方法，并确定最佳的日期格式。
内容 关于JSON日期格式，实际上并没有一个&amp;quot;正确&amp;quot;的格式，因为JSON本身并不规定日期的表示方式。然而，在JavaScript中，我们可以选择使用特定的日期格式。
最常用的日期表示方法是使用JavaScript内置的Date对象的toJSON方法生成的格式：2012-04-23T18:25:43.511Z。以下是使用该格式的几个原因：
易读且简洁：这个格式既容易阅读，又很简洁。 正确排序：这个日期格式可以正确排序，方便进行时间顺序的比较。 包含分数秒：这个格式包含了分数秒，有助于确保时间的准确性。 符合ISO 8601标准：这个日期格式符合国际标准ISO 8601的规定。 国际认可：ISO 8601已经在国际上被广泛接受并使用。 符合规范：ISO 8601得到W3C、RFC3339以及XKCD等机构的认可。 需要注意的是，虽然这个日期格式在大多数情况下被认为是最佳的选择，但每个日期库都可以理解&amp;quot;自1970年以来的毫秒数&amp;quot;。因此，如果需要易于移植性，使用毫秒数的格式是一个简单可行的选择。
以下是示例代码：
1const date = new Date(); 2const json = JSON.stringify(date); 3const parsed = JSON.parse(json); 4const dateObj = new Date(parsed); 总而言之，虽然JSON本身没有规定日期的表示方式，但在JavaScript中，使用Date对象的toJSON方法生成的格式（2012-04-23T18:25:43.511Z）被认为是最佳选择。选择日期格式时，需考虑易读性、排序性、数据准确性以及国际标准的因素。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
