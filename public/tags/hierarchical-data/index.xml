<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hierarchical-data on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/hierarchical-data/</link>
    <description>Recent content in hierarchical-data on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 08:42:24 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/hierarchical-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在关系数据库中存储分层数据的选项</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E5%88%86%E5%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%89%E9%A1%B9/</link>
      <pubDate>Mon, 11 Sep 2023 08:42:24 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E5%88%86%E5%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%89%E9%A1%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在关系数据库中存储分层数据的选项。我们将介绍不同的存储方法，如邻接表、嵌套集模型、桥接表和线性列等，以及它们的优缺点。
内容 在关系数据库中存储分层数据可能存在一些挑战，但是有几种方法可以解决这个问题。下面是一些常用的选项：
邻接表（Adjacency List） 邻接表是一种简单而直观的方法，它使用一个包含父节点ID的列来表示层级关系。每个节点在表中都有一行，该行包含其自身ID和父节点ID。
列： ID：节点的唯一标识符 ParentID：父节点的ID 例如，以下是一个使用邻接表存储的示例：
1CREATE TABLE categories ( 2 ID INT PRIMARY KEY, 3 ParentID INT, 4 Name VARCHAR(100) 5); 对于上述模式，我们可以这样插入数据：
1INSERT INTO categories (ID, ParentID, Name) 2VALUES (1, NULL, &amp;#39;ELECTRONICS&amp;#39;), 3 (2, 1, &amp;#39;TELEVISIONS&amp;#39;), 4 (3, 2, &amp;#39;TUBE&amp;#39;), 5 (4, 2, &amp;#39;LCD&amp;#39;), 6 (5, 2, &amp;#39;PLASMA&amp;#39;), 7 (6, 1, &amp;#39;PORTABLE ELECTRONICS&amp;#39;), 8 (7, 6, &amp;#39;MP3 PLAYERS&amp;#39;), 9 (8, 7, &amp;#39;FLASH&amp;#39;), 10 (9, 6, &amp;#39;CD PLAYERS&amp;#39;), 11 (10, 6, &amp;#39;2 WAY RADIOS&amp;#39;); 使用邻接表可以轻松地查询父节点、子节点和层级关系。例如，要获取所有子节点，可以执行以下查询：
          
          
        
      </description>
    </item>
    
    <item>
      <title>解析平面表为树的最高效/优雅的方法是什么？</title>
      <link>https://www.techdocdb.com/posts/%E8%A7%A3%E6%9E%90%E5%B9%B3%E9%9D%A2%E8%A1%A8%E4%B8%BA%E6%A0%91%E7%9A%84%E6%9C%80%E9%AB%98%E6%95%88/%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sat, 09 Sep 2023 09:34:25 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E8%A7%A3%E6%9E%90%E5%B9%B3%E9%9D%A2%E8%A1%A8%E4%B8%BA%E6%A0%91%E7%9A%84%E6%9C%80%E9%AB%98%E6%95%88/%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>
        
          
            假设你有一个存储有序树层次结构的平面表：
1Id Name ParentId Order 2 1 &amp;#39;Node 1&amp;#39; 0 10 3 2 &amp;#39;Node 1.1&amp;#39; 1 10 4 3 &amp;#39;Node 2&amp;#39; 0 20 5 4 &amp;#39;Node 1.1.1&amp;#39; 2 10 6 5 &amp;#39;Node 2.1&amp;#39; 3 10 7 6 &amp;#39;Node 1.2&amp;#39; 1 20 你可以通过以下方式将其正确排序、正确缩进到HTML（或文本）中：
根节点0是虚构的根节点。
下面是一个图表，其中我们使用[id] Name。
1 [0] ROOT 2 / \ 3 [1] Node 1 [3] Node 2 4 / \ \ 5 [2] Node 1.1 [6] Node 1.2 [5] Node 2.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
