<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>enums on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/enums/</link>
    <description>Recent content in enums on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 15:01:09 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/enums/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; FAQ：为什么优先使用enum class而不是普通的enum？</title>
      <link>https://www.techdocdb.com/posts/c&#43;&#43;-faq%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8enum-class%E8%80%8C%E4%B8%8D%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84enum/</link>
      <pubDate>Mon, 11 Sep 2023 15:01:09 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/c&#43;&#43;-faq%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8enum-class%E8%80%8C%E4%B8%8D%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84enum/</guid>
      <description>
        
          
            摘要 在C++中，enum class（枚举类）由于具有强类型和作用域枚举的特点，因此得到了广泛推荐和使用。本文将介绍为什么enum class更受推崇，并通过示例说明其优势。
内容 在C++中，有两种类型的枚举：
enum class（枚举类） 普通的enum（枚举） 下面是一些示例来说明它们的声明方式：
1enum class Color { red, green, blue }; // 枚举类 2enum Animal { dog, cat, bird, human }; // 普通的枚举 这两者有什么区别呢？
枚举类（enum class）的枚举器名称仅在枚举类内部可见，它们的值不能隐式转换为其他类型（如另一个枚举或int）。 普通的枚举（enum）的枚举器名称在同一作用域中可见，它们的值可以隐式转换为整型和其他类型。 以下是一个示例：
1enum Color { red, green, blue }; // 普通的枚举 2 3void foo(Color color) { 4 int num = color; // 没问题 5 6 if (color == red) // 没问题（但不好） 7 cout &amp;lt;&amp;lt; &amp;#34;bad&amp;#34; &amp;lt;&amp;lt; endl; 8} 在上述代码中，普通的枚举（enum）可以被隐式转换为int，这可能会导致错误的比较和使用。而使用枚举类（enum class）可以避免这些问题。
          
          
        
      </description>
    </item>
    
    <item>
      <title>总数</title>
      <link>https://www.techdocdb.com/posts/%E6%80%BB%E6%95%B0/</link>
      <pubDate>Sun, 10 Sep 2023 08:11:34 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E6%80%BB%E6%95%B0/</guid>
      <description>
        
          
            计算枚举项的总数是在许多编程任务中的常见需求之一。在.NET和C#中，有几种方法可以解决这个问题。
使用Enum.GetNames方法 Enum.GetNames方法可以返回表示枚举中所有项的名称的数组。使用此数组的Length属性可以得到枚举项的总数。
1var myEnumMemberCount = Enum.GetNames(typeof(MyEnum)).Length; 使用Enum.GetValues方法 Enum.GetValues方法可以返回一个表示枚举中所有项的值的数组。使用此数组的Length属性可以得到枚举项的总数。
1var myEnumMemberCount = Enum.GetValues(typeof(MyEnum)).Length; 示例 考虑以下枚举类型MyEnum的定义：
1enum MyEnum 2{ 3 A = 1, 4 B = 2, 5 C = 1, 6 D = 3, 7 E = 2 8} 我们可以使用Enum.GetNames方法来计算枚举项的总数：
1var namesCount = Enum.GetNames(typeof(MyEnum)).Length; 我们也可以使用Enum.GetValues方法来计算枚举项的总数：
1var valuesCount = Enum.GetValues(typeof(MyEnum)).Cast&amp;lt;MyEnum&amp;gt;().Distinct().Count(); 注意，使用Enum.GetValues方法时需要将结果转换为MyEnum类型，并通过Distinct方法去除重复项。
效率比较 对于以上两种方法，一种是使用Enum.GetNames方法，一种是使用Enum.GetValues方法。我们进行了性能比较测试，并得出以下结果：
方法 平均耗时 Enum.GetNames 47.15 ns Enum.GetValues 671.30 ns 从测试结果可以看出，使用Enum.GetNames方法的效率要比使用Enum.GetValues方法高得多。
结论 通过使用Enum.GetNames方法或Enum.GetValues方法，我们可以轻松地获取枚举中的项的总数。这些是.NET和C#中常用的方法，可以帮助我们完成这个任务。根据实际需求和性能要求，可以选择适合的方法来获取枚举项的总数。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 Java 中使用 switch 语句和枚举</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-switch-%E8%AF%AD%E5%8F%A5%E5%92%8C%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Thu, 24 Aug 2023 12:31:06 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-switch-%E8%AF%AD%E5%8F%A5%E5%92%8C%E6%9E%9A%E4%B8%BE/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在 Java 中使用 switch 语句和枚举。我们将使用示例代码来说明这个过程。
内容 在 Java 中，可以使用 switch 语句来进行多条件的比较。当与枚举一起使用时，可以更方便地处理不同的情况。
以下是一个示例代码：
1public class SomeClass { 2 3 public enum MyEnum { 4 VALUE_A, VALUE_B 5 } 6 7 public void someMethod() { 8 MyEnum enumExample = MyEnum.VALUE_A; 9 10 switch (enumExample) { 11 case VALUE_A: { 12 // 这里是 VALUE_A 的逻辑 13 break; 14 } 15 case VALUE_B: { 16 // 这里是 VALUE_B 的逻辑 17 break; 18 } 19 } 20 } 21} 在上述示例中，我们定义了一个枚举 MyEnum，它包含了两个枚举常量 VALUE_A 和 VALUE_B。在 someMethod 方法中，我们使用了 switch 语句来根据 enumExample 的值进行不同的逻辑处理。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
