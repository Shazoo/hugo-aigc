<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/shell/</link>
    <description>Recent content in shell on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 08 Sep 2023 14:42:46 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何从命令行重新加载.bash_profile</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD.bash_profile/</link>
      <pubDate>Fri, 08 Sep 2023 14:42:46 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD.bash_profile/</guid>
      <description>
        
          
            摘要 本教程将向您展示如何从命令行重新加载.bash_profile文件，以便立即应用更改。通过以下几种方法，您可以避免退出并重新登录来使更改生效，并在需要时按需执行重新加载。本教程的示例将提供具体的命令和步骤，以便您轻松理解和操作。
内容 无需退出登录，您只需在命令行中执行以下命令即可重新加载.bash_profile文件：
1source ~/.bash_profile 或者，如果您想要键入更少的字符，您可以使用以下命令：
1. ~/.bash_profile 只需确保您的.bash_profile文件中没有依赖于当前状态的内容。这些命令将使您的终端立即加载最新的.bash_profile文件。
您还可以使用以下命令重新加载特定用户的.bash_profile文件：
1su - username 请注意，在执行这些命令之前，请将.bash_profile文件保存好，并通过cd命令进入用户的主目录。然后，使用. .bash_profile命令重新加载文件。
实际上，如果您希望终端每次启动时自动运行.bash_profile文件而不是每次打开终端时手动运行它，您可以将. ~/.bash_profile添加到~/.bashrc文件中。
请注意，当您打开终端时，终端会以（非登录）交互模式启动bash，这意味着它将加载.bashrc文件。.bash_profile仅在bash以交互登录模式启动时加载。通常，这仅在您通过终端登录（Ctrl+Alt+F1..F6），或通过ssh连接时才会发生。
如果您想要为重新加载.bash_profile命令设置别名，您可以将以下命令添加到Bash文件中：
1alias bashs=&amp;#34;source ~/.bash_profile&amp;#34; 这样，您下一次只需键入bashs即可重新加载.bash_profile文件。
如果.bash_profile文件不存在，您可以尝试运行以下命令来重新加载.bashrc文件：
1. ~/.bashrc 或者
1source ~/.bashrc 请注意，这将加载.bashrc文件而不是.bash_profile文件。您可以在这里找到有关bashrc文件的更多信息。
还有一种方法是通过以下方式重新加载最近编辑过的文件历史记录：
1. !$ 这将重新加载您刚刚在历史记录中编辑的文件。有关“bang dollar”在bash中的更多信息，请参阅这里。
如果您使用的是Debian系统，您可以简单地键入exec bash来实现重新加载.bash_profile文件。对于其他发行版，可能需要尝试其他方法。
如果您运行的是macOS v10.12（Sierra），并且使用其他方法后仍然无法重新加载.bash_profile文件，您可以尝试重新启动计算机，有时候需要进行硬重启。但是，请注意，这不是解决问题的最佳方法。
在某些情况下，通过重新加载.bash_profile可能不会在所有标签页/终端中生效。除了使用之前提到的命令外，您还可以使用以下方法在每个标签页中重新加载bash profile。
如果您使用iTerm，您可以使用CMD⌘+Shift+I将命令输入到所有当前标签页。对于终端，您可以参考这里。
如果您想要在bash文件中添加别名以便下次调用，可以使用以下命令：
1alias reload!=&amp;#34;. ~/.bash_profile&amp;#34; 或者，如果想要通过函数添加日志：
1function reload! () { 2 echo &amp;#34;Reloading bash profile...!&amp;#34; 3 source ~/.bash_profile 4 echo &amp;#34;Reloaded!!!&amp;#34; 5} 简单地输入. ~/.bash_profile即可重新加载文件。有关source命令的更多信息，请参阅这里。
如果您不介意丢失当前shell终端的历史记录，您还可以执行以下命令：
1bash -l 这将fork一个新的bash子进程，并以登录shell的形式运行。这是必需的，因为非登录shell不会运行.
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Shell脚本中执行Mongo命令</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%89%A7%E8%A1%8Cmongo%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Sep 2023 21:46:15 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%89%A7%E8%A1%8Cmongo%E5%91%BD%E4%BB%A4/</guid>
      <description>
        
          
            摘要 本教程将解释如何在Shell脚本中执行Mongo命令。通过创建一个包含Mongo命令的单独的js文件并使用输入重定向可以实现这一目的。还可以使用--eval选项将Mongo命令作为参数直接传递给mongo命令。
内容 引言 有时我们希望在Shell脚本中执行MongoDB的命令。我们可以通过几种方法来实现这一点。本教程将介绍几种常见的方法。
解决方案：使用输入重定向 可以将Mongo命令写入一个单独的.js文件，然后使用输入重定向将该文件传递给mongo命令。
例如，创建一个名为mongoCmds.js的文件，其中包含以下内容：
1use myDbName 2db.mycollection.findOne() 3show collections 然后，在Shell脚本中执行以下命令：
1mongo &amp;lt; mongoCmds.js 这将执行Mongo命令并显示输出结果。
解决方案：使用--eval选项 还可以使用--eval选项将Mongo命令作为参数直接传递给mongo命令。
例如：
1mongo --eval &amp;#34;printjson(db.serverStatus())&amp;#34; 这将执行单个Mongo命令并打印输出结果。
请注意，如果Mongo命令中使用了以$符号开头的Mongo运算符，则需要用单引号将其括起来，以避免Shell将其解析为环境变量。
总结 通过使用输入重定向或--eval选项，可以在Shell脚本中执行Mongo命令。您可以根据需要选择其中一种方法。希望本教程对您有所帮助。
          
          
        
      </description>
    </item>
    
    <item>
      <title>关于/dev/null 2&gt;&amp;1的含义</title>
      <link>https://www.techdocdb.com/posts/%E5%85%B3%E4%BA%8E/dev/null-21%E7%9A%84%E5%90%AB%E4%B9%89/</link>
      <pubDate>Fri, 01 Sep 2023 08:03:54 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%85%B3%E4%BA%8E/dev/null-21%E7%9A%84%E5%90%AB%E4%B9%89/</guid>
      <description>
        
          
            摘要 本教程将解释/dev/null 2&amp;gt;&amp;amp;1的含义。我们将解释每个部分的作用，并提供例子来说明使用该语法的目的。
内容 在给出对/dev/null 2&amp;gt;&amp;amp;1的详细解释之前，让我们逐个解析这个表达式的不同部分。
&amp;gt;&amp;gt; 是输出重定向操作符，将输出追加到指定文件中。在这里，&amp;gt;&amp;gt; 用于将输出追加到 /dev/null 文件中。 /dev/null 是一个称为“黑洞”的特殊文件系统对象。将输出重定向到 /dev/null，实际上就将输出丢弃掉。 2&amp;gt;&amp;amp;1 是将标准错误(stderr)重定向到标准输出(stdout)的语法。这意味着标准错误的输出会被重定向到与标准输出相同的位置。 因此，command &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 的含义如下：
command 的输出被追加到 /dev/null，即被丢弃掉。 2&amp;gt;&amp;amp;1 将标准错误的输出重定向到与标准输出相同的位置，也就是 /dev/null。 这个语法的目的是使程序在执行时不产生任何输出。同时，通过将标准错误重定向到标准输出，任何标准错误的输出也将被丢弃。
在问题的例子中，/etc/cron.daily/apf 的输出被重定向到 /dev/null，从而取消了防火墙的输出。因此，删除这个cron作业可能会导致防火墙规则的输出恢复，如果你不希望看到这些输出，可以保留这个cron作业。
总结 使用&amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 的语法可以使程序在执行时变得安静，并且丢弃任何输出。通过将标准错误重定向到标准输出，标准错误的输出也将被丢弃。
感谢阅读本教程！
注意：在使用这种语法时，需要理解各个部分的含义，并根据实际情况选择合适的输出重定向方式。根据需要，可以将输出重定向到其他文件，而不仅仅是/dev/null。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
