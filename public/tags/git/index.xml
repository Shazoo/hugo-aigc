<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/git/</link>
    <description>Recent content in git on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 15:23:43 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Revert vs. Checkout vs. Reset</title>
      <link>https://www.techdocdb.com/posts/git-revert-vs.-checkout-vs.-reset/</link>
      <pubDate>Mon, 11 Sep 2023 15:23:43 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/git-revert-vs.-checkout-vs.-reset/</guid>
      <description>
        
          
            概要 本教程将解释Git中的三个命令——git revert、git checkout和git reset的区别及用法。
内容 git revert git revert命令用于撤销之前的提交，并创建一个新的提交来撤销前一个提交所做的更改。这个命令会添加新的历史记录到项目中，而不会修改已有的历史记录。
git checkout git checkout命令用于将存储在版本库中的内容检出到工作树中。它也可以有其他效果，具体取决于命令的用法。例如，它还可以切换工作的分支。这个命令不会对历史记录进行任何更改。
git reset git reset命令稍微复杂一些。它的作用会根据用法的不同而有所不同。它可以修改索引（即暂存区），或者更改分支头所指向的提交。这个命令可能会修改已有的历史记录（通过改变分支引用所指向的提交）。
用法示例 如果你想撤销之前的提交，可以使用git revert命令。它会创建一个撤销前一次提交更改的新提交，并在历史记录中记录下这次“撤销”操作。
如果你在工作树中修改了一个文件，但没有提交这个修改，可以使用git checkout命令来还原该文件到代码库中的版本。
如果你已经提交了一个错误的修改，但还没有与其他人共享这个提交，你可以使用git reset命令来重写历史，使得看起来好像你从未进行过这个提交。
这只是一些可能的应用场景，还有其他命令可以在特定情况下使用，上述的三个命令也有其他用途。
总结 git revert、git checkout和git reset是三个完全不同的命令，它们的用途和作用也大不相同。在使用时需要根据具体的场景选择适当的命令。
          
          
        
      </description>
    </item>
    
    <item>
      <title>git-branch 分支名</title>
      <link>https://www.techdocdb.com/posts/git-branch-%E5%88%86%E6%94%AF%E5%90%8D/</link>
      <pubDate>Sun, 10 Sep 2023 15:17:25 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/git-branch-%E5%88%86%E6%94%AF%E5%90%8D/</guid>
      <description>
        
          
            git-branch 是一个常用的 Git 命令，用于显示所有本地分支的列表。在这个列表中，通过星号 (*) 标记的分支名称就是当前所在的分支。以下是一些获取当前分支名称的方法。
获取当前分支名称的方法 有几种方法可以获取 Git 中的当前分支名称。下面是其中一些方法的示例。
方法一：使用 git branch 命令 通过运行以下命令，您可以获取当前所在的分支名称（带有星号标记的分支）：
1git branch | grep &amp;#39;*&amp;#39; 这将输出一个类似于 * master 的结果，表示您当前所在的分支是 master。
方法二：使用 git rev-parse 命令 运行以下命令，可以获取当前分支的名称：
1git rev-parse --abbrev-ref HEAD 这将返回当前分支的名称，例如 master。
方法三：使用 git status 命令 另一种获取当前分支名称的方法是运行以下命令：
1git status | head -1 这将输出第一行，其中包含了当前分支的名称，例如 On branch master。
方法四：使用 git symbolic-ref HEAD 命令 在 Git 仓库中运行以下命令来获取当前分支的名称：
1git symbolic-ref --short HEAD 这会返回当前分支的名称，例如 master。
方法五：使用 git describe 命令 运行以下命令，可以获取当前分支的名称：
1git describe --contains --all HEAD 这将返回当前分支的名称，例如 feature/branch。它还会显示当前提交所在的所有分支名称。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何在克隆之前查看GitHub存储库的大小？</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%8B%E9%9A%86%E4%B9%8B%E5%89%8D%E6%9F%A5%E7%9C%8Bgithub%E5%AD%98%E5%82%A8%E5%BA%93%E7%9A%84%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Sun, 10 Sep 2023 10:27:37 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%8B%E9%9A%86%E4%B9%8B%E5%89%8D%E6%9F%A5%E7%9C%8Bgithub%E5%AD%98%E5%82%A8%E5%BA%93%E7%9A%84%E5%A4%A7%E5%B0%8F/</guid>
      <description>
        
          
            在我们决定是否要克隆GitHub存储库之前，有没有办法在GitHub上查看Git存储库的大小呢？
这似乎是一个非常明显/基本的统计数据，但我找不到在GitHub上如何查看它的方法。
解决方案 可以通过GitHub API访问此信息。
API文档：GitHub API文档 用法：GET /repos/:user/:repo 示例：https://api.github.com/repos/git/git 在检索关于存储库的信息时，返回的JSON中的一个属性名为“size”，以千字节为单位表示整个存储库（包括其全部历史记录）的大小。
例如，Git存储库大小约为124MB。返回的JSON中的“size”属性的值为124283。
注：确实是以千字节的方式表示大小，基于服务器端裸存储库的磁盘使用情况。但是，为了避免在具有大网络的存储库中浪费太多空间，GitHub依赖于Git替代品（Git alternates）。在这种配置中，根据裸存储库计算磁盘使用量不会计算共享对象存储，从而通过API调用返回了一个“不完整”的值。这是GitHub支持提供的信息。
参考代码 想要查看示例代码，请点击下方链接：
bash Python JavaScript Bookmarklet GitHub CLI 浏览器扩展 参考代码： bash 1curl -u &amp;#34;YOURGITHUBUSERNAME&amp;#34; https://api.github.com/repos/OWNER/REPOSITORY 2&amp;gt;/dev/null | grep size | tr -dc &amp;#39;[:digit:]&amp;#39; 将YOURGITHUBUSERNAME替换为您的GitHub用户名。 将OWNER替换为存储库所有者的Git用户名。 将REPOSITORY替换为存储库名称。
例如：
1curl -u &amp;#34;YOURGITHUBUSERNAME&amp;#34; https://api.github.com/repos/git/git 2&amp;gt;/dev/null | grep size | tr -dc &amp;#39;[:digit:]&amp;#39; 返回值为931668（以KB为单位），约等于1GB。
私有存储库需要进行身份验证。一种方法是使用GitHub个人访问令牌：
1curl -u &amp;#34;YOURGITHUBUSERNAME:$PERSONAL_ACCESS_TOKEN&amp;#34; https://api.github.com/repos/OWNER/REPOSITORY 2&amp;gt;/dev/null | grep size | tr -dc &amp;#39;[:digit:]&amp;#39; 将YOURGITHUBUSERNAME替换为您的GitHub用户名。 将PERSONAL_ACCESS_TOKEN替换为您的个人访问令牌。 将OWNER替换为存储库所有者的Git用户名。 将REPOSITORY替换为存储库名称。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Git中&#34;git reset&#34;和&#34;git checkout&#34;的区别</title>
      <link>https://www.techdocdb.com/posts/git%E4%B8%ADgit-reset%E5%92%8Cgit-checkout%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 10 Sep 2023 09:39:30 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/git%E4%B8%ADgit-reset%E5%92%8Cgit-checkout%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            Git是一款非常流行的版本控制系统，其中的&amp;quot;git reset&amp;quot;和&amp;quot;git checkout&amp;quot;是常用的命令。很多人对这两个命令的作用有些混淆，以为它们是相同的，都可以将项目回退到特定的提交点。但实际上，它们是有区别的。本文将解释一下它们的实际区别，并通过一些例子来说明。
git reset 首先，我们来看一下&amp;quot;git reset&amp;quot;命令。&amp;quot;git reset&amp;quot;主要用于更新索引，移动HEAD指针。具体来说，执行&amp;quot;git reset&amp;quot;命令会将HEAD和当前分支指向具体的提交点，从而实现回退操作。需要注意的是，如果不指定具体的提交点，则默认会回退到最近的一次提交点。
下面是一个使用&amp;quot;git reset&amp;quot;命令的例子：
1git reset HEAD~1 该命令将会将HEAD和当前分支回退到上一个提交点。需要注意的是，这只会更新索引，而不会影响工作目录中的文件。
git checkout 接下来，我们来看一下&amp;quot;git checkout&amp;quot;命令。&amp;quot;git checkout&amp;quot;主要用于更新工作目录中的文件，而不会影响索引。具体来说，执行&amp;quot;git checkout&amp;quot;命令会将指定的提交点的文件拷贝到工作目录中。需要注意的是，如果不指定具体的提交点，则默认会将当前分支的最新提交点的文件拷贝到工作目录中。
下面是一个使用&amp;quot;git checkout&amp;quot;命令的例子：
1git checkout master 该命令将会将工作目录中的文件替换为&amp;quot;master&amp;quot;分支的最新提交点的文件。需要注意的是，如果当前分支和目标分支不相同，则会进入&amp;quot;detached HEAD&amp;quot;状态。
总结 总的来说，&amp;quot;git reset&amp;quot;命令是用于更新索引，移动HEAD指针的，而&amp;quot;git checkout&amp;quot;命令是用于更新工作目录中的文件的。它们在操作过程中可能会有一些重叠，但最关键的区别在于&amp;quot;git reset&amp;quot;会移动当前分支指针，而&amp;quot;git checkout&amp;quot;不会移动当前分支指针。
以上就是关于&amp;quot;git reset&amp;quot;和&amp;quot;git checkout&amp;quot;的区别的介绍。希望能对大家理解这两个命令有所帮助。
参考资料 Git官方文档：git-reset Git官方文档：git-checkout 
          
          
        
      </description>
    </item>
    
    <item>
      <title>git-diff基础教程</title>
      <link>https://www.techdocdb.com/posts/git-diff%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 08 Sep 2023 17:35:48 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/git-diff%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在git提交之前查看文件差异。当你在一天或两天的时间里同时进行多个相关的更改，并在提交时忘记某个特定文件发生了什么变化时，这种情况经常发生。你可以使用git diff命令来预览本地文件与上一次提交的文件之间的差异。
内容 你可以通过以下方式来查看尚未通过git add添加的更改：
1git diff myfile.txt 如果你想查看已添加更改，可以使用以下命令：
1git diff --cached myfile.txt 你还可以使用git difftool来查看差异，它可以使用图形界面工具（如Meld、DiffMerge或OpenDiff）。只需运行以下命令：
1git difftool myfile.txt 如果你想查看当前目录下的所有更改，可以使用git diff .命令。另外，使用git blame命令可以查看每行更改，它会显示每行在哪次提交中被修改。
如果你想在提交之前查看文件的实际内容（假设master是你的分支），运行以下命令：
1git show master:path/my_file 如果你想要一种更方便的方式来比较文件与最后一次提交的差异，可以使用git difftool -d命令。这将打开目录比较模式，比较HEAD与当前的文件夹。
另一种比较文件与最后一次提交差异的技巧是使用git diff master myfile.txt命令。这种方法的优势是可以使用git diff master^来与倒数第二次提交进行比较，还可以使用git diff master^^与倒数第三次提交进行比较。如果你不在主分支上，你可以用你的分支名替换&#39;master&#39;。
总结 以上是如何在git提交之前查看文件差异的几种方法。你可以根据自己的需求选择不同的方式来查看文件的变化。通过使用git提供的差异比较工具，你可以更轻松地理解自己在文件中所做的更改。
如果你在macOS上使用git，你可以使用git diff *命令在git根目录下查看所有文件的差异。另外，你也可以使用git difftool -d HEAD filename.txt命令在终端的VI分屏窗口中查看比较结果。选用合适的工具可以使你更便捷地查看和管理代码的差异。
          
          
        
      </description>
    </item>
    
    <item>
      <title>GitHub pull request 显示已经在目标分支中的提交</title>
      <link>https://www.techdocdb.com/posts/github-pull-request-%E6%98%BE%E7%A4%BA%E5%B7%B2%E7%BB%8F%E5%9C%A8%E7%9B%AE%E6%A0%87%E5%88%86%E6%94%AF%E4%B8%AD%E7%9A%84%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Fri, 08 Sep 2023 08:31:34 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/github-pull-request-%E6%98%BE%E7%A4%BA%E5%B7%B2%E7%BB%8F%E5%9C%A8%E7%9B%AE%E6%A0%87%E5%88%86%E6%94%AF%E4%B8%AD%E7%9A%84%E6%8F%90%E4%BA%A4/</guid>
      <description>
        
          
            GitHub的pull request功能是开发团队协作开发的重要工具。然而，在某些情况下，当我们进行pull request时，我们会发现显示的提交和差异与我们预期的不符。特别是在目标分支有新提交时，已经合并的提交可能仍然在pull request中显示。
解决方法 这个问题是由于GitHub pull request的工作原理导致的。默认情况下，pull request会显示源分支和目标分支的共同祖先之后的所有变更，在此过程中不会考虑到目标分支上所发生的任何更改。这就是为什么即使在目标分支上进行了合并，pull request仍然显示已经合并的提交的原因。
以下是一些解决该问题的方法。
方法一：使用URL比较链接 您可以通过以下URL链接来显示更新后的变更：
1http://githuburl/org/repo/compare/targetbranch...currentbranch 请根据实际情况替换githuburl、org、repo、targetbranch和currentbranch。通过使用这个URL链接，您将看到更新后的变更以及差异。
方法二：修改基准分支 另一种解决方法是通过修改pull request的基准分支来强制更新。您可以通过点击pull request界面上的“Edit”按钮，将基准分支临时修改为其他分支，然后再修改回原来的基准分支。这样做会在pull request中产生一个警告，告诉您可能会导致一些旧的提交被移除，以及旧的评论可能会变得过时。这样修改后，pull request将只显示最新提交的变更。
方法三：定期合并目标分支 为了避免这个问题，您可以定期将目标分支合并到pull request的分支中。通过定期合并目标分支，您将不会遇到任何意外的问题，并且pull request将始终显示最新的变更。
方法四：使用git rebase命令 如果上述方法无法解决问题，您可以尝试使用git rebase命令来重新应用提交。具体步骤如下：
更新本地目标分支：git pull origin targetbranch 切换到包含更改的分支：git checkout currentbranch 使用git rebase命令重新应用提交：git rebase origin/targetbranch 用git push --force targetbranch命令强制推送更改。 但请小心使用该方法，如果您不确定自己在做什么，建议先创建一个测试分支进行操作，并使用git diff targetbranch命令确保更改后的分支与预期一致。
方法五：修改git配置 如果您不喜欢手动重复上述操作，可以在您的~/.gitconfig文件中添加以下配置：
1[rebase] 2 autosquash = true 这将自动执行与使用git rebase命令相同的操作。
方法六：创建新的pull request 如果上述方法都无法解决问题，您还可以尝试创建一个新的pull request。具体步骤如下：
切换到包含更改的分支：git checkout currentbranch 在该分支上创建一个新的分支：git checkout -b new-branch-name 推送新的分支到远程仓库：git push -u origin new-branch-name 然后在GitHub上打开一个新的pull request，并关闭旧的pull request。 方法七：编辑pull request 您还可以通过编辑pull request来解决这个问题。您可以点击GitHub上pull request界面的“Edit”按钮，并将基准分支更改为不同于之前的分支，然后再改回原来的基准分支。这样才能确保pull request正确显示最新的提交变更。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Git中合并多个提交后再推送</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8git%E4%B8%AD%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E5%90%8E%E5%86%8D%E6%8E%A8%E9%80%81/</link>
      <pubDate>Fri, 08 Sep 2023 01:18:25 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8git%E4%B8%AD%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E5%90%8E%E5%86%8D%E6%8E%A8%E9%80%81/</guid>
      <description>
        
          
            摘要 在Git中，我们可以使用交互式变基（Interactive Rebase）来合并多个提交。本教程将演示如何使用交互式变基实现这一目标。
内容 要合并多个提交，可以按照以下步骤操作：
运行交互式变基命令git rebase -i HEAD~n，其中n是要合并的提交数。 根据提示，将要合并的提交的命令行前的pick替换为squash或s。确保保留第一个提交的pick命令。 保存文件并关闭编辑器。 对于合并后的提交消息，编辑器会再次打开，以便将所有提交的提交消息合并为一个大的提交消息。 保存文件并关闭编辑器。 以下是具体示例：
1git rebase -i HEAD~4 这将打开一个文本编辑器，并显示类似于以下的文件：
1pick 16b5fcc Code in, tests not passing 2pick c964dea Getting closer 3pick 06cf8ee Something changed 4pick 396b4a3 Tests pass 5pick 9be7fdb Better comments 6pick 7dba9cb All done 将除第一个提交之外的所有pick替换为squash或s，文件应修改为：
1pick 16b5fcc Code in, tests not passing 2squash c964dea Getting closer 3squash 06cf8ee Something changed 4squash 396b4a3 Tests pass 5squash 9be7fdb Better comments 6squash 7dba9cb All done 保存并关闭文件后，编辑器会再次打开，以便将所有提交的提交消息合并为一个大的提交消息。在此编辑器中，你可以编辑合并后的提交消息。
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用Git，显示在一个分支中但不在其他分支中的所有提交</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8git%E6%98%BE%E7%A4%BA%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%AD%E4%BD%86%E4%B8%8D%E5%9C%A8%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Thu, 07 Sep 2023 17:51:05 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8git%E6%98%BE%E7%A4%BA%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%AD%E4%BD%86%E4%B8%8D%E5%9C%A8%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在Git中显示在一个分支中但不在其他分支中的所有提交。当我们想要删除一个旧分支之前，我们通常需要检查该分支上的所有提交是否在其他分支中进行过合并。因此，我们想要查看当前分支上的所有提交，但这些提交没有被应用到任何其他分支上。我们将提供示例代码来演示如何显示在一个分支中但不在其他给定分支中的所有提交。
方法介绍 在Git中，可以使用不同的命令和选项来显示在一个分支中但不在其他分支中的所有提交。以下是一些常用的方法：
git log: 使用git log命令可以显示提交日志。可以使用特定的选项和范围来过滤要显示的提交。 示例 以下是显示在一个分支中但不在其他分支中的所有提交的示例代码：
1git log oldbranch..newbranch 这将显示在oldbranch中但不在newbranch中的所有提交。
总结 通过本教程，我们了解了如何在Git中显示在一个分支中但不在其他分支中的所有提交。使用git log命令和合适的选项，我们可以过滤并显示特定范围内的提交。在实际使用中，我们可以根据需要调整命令和选项来满足不同的需求。清楚地了解如何查看和比较不同分支中的提交对于代码管理和版本控制非常重要。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Git中更改已推送的提交消息（前提是没有人从远程仓库拉取）</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8git%E4%B8%AD%E6%9B%B4%E6%94%B9%E5%B7%B2%E6%8E%A8%E9%80%81%E7%9A%84%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E5%89%8D%E6%8F%90%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BA%BA%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96/</link>
      <pubDate>Thu, 07 Sep 2023 15:30:34 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8git%E4%B8%AD%E6%9B%B4%E6%94%B9%E5%B7%B2%E6%8E%A8%E9%80%81%E7%9A%84%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E5%89%8D%E6%8F%90%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BA%BA%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在Git中更改已经推送的提交消息。我们将讨论如何使用Git命令来更改特定提交的消息，并推送更改到远程仓库。
内容 在Git中，可以使用以下步骤来更改已经推送的提交消息：
如果要更改的提交是最近的提交，可以直接使用以下命令来修改提交消息：
1git commit --amend 这将打开文本编辑器并允许你编辑提交消息。你还可以使用-m参数来直接编辑旧消息，例如：
1git commit --amend -m &amp;#34;New commit message&amp;#34; 在推送更改到远程仓库时，使用以下命令：
1git push --force-with-lease &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt; 或者使用+号：
1git push &amp;lt;repository&amp;gt; +&amp;lt;branch&amp;gt; 或者使用--force参数：
1git push --force &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt; 注意，在使用这些命令时要小心：
如果其他人已经推送了相同的分支，你可能会覆盖他们的更改。最安全的方法是使用--force-with-lease选项，它会在有任何上游更改时中止推送操作。 如果你没有明确指定分支，默认情 
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何在克隆git仓库时删除已添加到.gitignore的目录</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%8B%E9%9A%86git%E4%BB%93%E5%BA%93%E6%97%B6%E5%88%A0%E9%99%A4%E5%B7%B2%E6%B7%BB%E5%8A%A0%E5%88%B0.gitignore%E7%9A%84%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Wed, 06 Sep 2023 10:40:33 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%8B%E9%9A%86git%E4%BB%93%E5%BA%93%E6%97%B6%E5%88%A0%E9%99%A4%E5%B7%B2%E6%B7%BB%E5%8A%A0%E5%88%B0.gitignore%E7%9A%84%E7%9B%AE%E5%BD%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在克隆git仓库时删除已添加到.gitignore的目录。我们将说明如何从GitHub和仓库历史中删除.gitignore中指定的目录，并提供示例代码来说明这个过程。
从远程仓库删除目录并更新仓库历史 通常情况下，.gitignore文件中的规则只适用于未跟踪的文件。由于已经将目录下的文件提交到仓库中，因此需要在仓库中删除这些文件和对应的目录，并提交这一变更。以下是删除已在.gitignore中指定的目录并更新仓库历史的步骤：
使用以下命令删除本地仓库中的目录：
1git rm -r --cached 目录路径 该命令将删除目录下的文件和目录，并从本地仓库中取消跟踪这些文件。
提交这次变更：
1git commit -m &amp;#39;从仓库中删除指定目录&amp;#39; 这将创建一个提交记录，说明删除了.gitignore中指定的目录。
将这一变更推送到远程仓库：
1git push origin 分支名称 这将把仓库中的变更推送到远程仓库，包括删除目录的操作。
请注意，通过上述步骤删除仓库中的目录和更新仓库历史会改变仓库的历史记录。确保在执行这些操作之前备份并谨慎考虑是否需要这样做。
总结 在克隆git仓库时删除已添加到.gitignore的目录需要对仓库进行一系列操作。您需要从本地仓库中删除目录，提交这次变更，并将变更推送到远程仓库。确保在执行这些操作之前备份重要的文件，并慎重考虑是否需要删除目录和更新仓库历史。现在，您可以根据自己的需要使用这些步骤在克隆git仓库时删除已添加到.gitignore的目录。
          
          
        
      </description>
    </item>
    
    <item>
      <title>将composer.lock提交至版本控制吗？</title>
      <link>https://www.techdocdb.com/posts/%E5%B0%86composer.lock%E6%8F%90%E4%BA%A4%E8%87%B3%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%90%97/</link>
      <pubDate>Wed, 06 Sep 2023 08:04:47 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%B0%86composer.lock%E6%8F%90%E4%BA%A4%E8%87%B3%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%90%97/</guid>
      <description>
        
          
            摘要 本教程将探讨是否应该将composer.lock文件提交至版本控制，并对该问题给出了明确的回答。您将了解到composer.lock文件的作用以及提交该文件的重要性。
内容 在使用Composer进行PHP项目依赖管理时，有一个文件叫做composer.lock。该文件记录了当前项目的所有依赖以及其具体版本。composer.lock文件对于确保不同开发者和团队成员使用相同的依赖版本非常重要。
以下是关于是否应该将composer.lock文件提交至版本控制的一些观点：
应该提交composer.lock文件：将composer.lock文件提交至版本控制是明确的建议。这样可以确保团队中的所有人都使用相同的依赖版本，并且可以避免因依赖版本不一致而引发的问题。
不应该提交composer.lock文件：有些人认为composer.lock文件属于构建元数据，不应包含在项目中。他们认为依赖的状态应该通过版本控制系统和自动化构建过程中的其它方式进行控制，而不是通过手动提交composer.lock文件。
综上所述，如果您希望确保团队内的每个人使用相同的依赖版本，并避免因依赖版本不一致而引发的问题，应该将composer.lock文件提交至版本控制。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Github 提示在按照屏幕上的说明进行操作和推送新仓库时要求输入用户名/密码</title>
      <link>https://www.techdocdb.com/posts/github-%E6%8F%90%E7%A4%BA%E5%9C%A8%E6%8C%89%E7%85%A7%E5%B1%8F%E5%B9%95%E4%B8%8A%E7%9A%84%E8%AF%B4%E6%98%8E%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8E%A8%E9%80%81%E6%96%B0%E4%BB%93%E5%BA%93%E6%97%B6%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D/%E5%AF%86%E7%A0%81/</link>
      <pubDate>Mon, 04 Sep 2023 05:31:10 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/github-%E6%8F%90%E7%A4%BA%E5%9C%A8%E6%8C%89%E7%85%A7%E5%B1%8F%E5%B9%95%E4%B8%8A%E7%9A%84%E8%AF%B4%E6%98%8E%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8E%A8%E9%80%81%E6%96%B0%E4%BB%93%E5%BA%93%E6%97%B6%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D/%E5%AF%86%E7%A0%81/</guid>
      <description>
        
          
            摘要 当按照屏幕上的说明进行操作并推送新仓库时，Github提示要求输入用户名和密码。本教程将介绍如何解决这个问题。
内容 要解决Github提示要求输入用户名和密码的问题，可以按照以下步骤进行操作。
使用SSH而不是HTTP 将远程仓库的URL从HTTP更改为SSH。使用SSH可以通过配置让Git知道你在这台计算机上具有访问权限，而不需要每次都输入用户名和密码。在示例中，将URL改为：
1git@github.com:WEMP/project-slideshow.git 修改配置文件 可以直接编辑.git/config文件，将URL进行修改。找到对应的仓库配置，将URL从HTTP改为SSH。
增加引号 确保URL的用户名部分加入引号。例如，将URL修改为：
1https://*username*@github.com/WEMP/project-slideshow.git 在以上步骤中，通过使用SSH而不是HTTP，或者修改URL使其包含引号，可以解决Github提示要求输入用户名和密码的问题。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何在 Git 仓库中保留文件但不跟踪其变化</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E4%BF%9D%E7%95%99%E6%96%87%E4%BB%B6%E4%BD%86%E4%B8%8D%E8%B7%9F%E8%B8%AA%E5%85%B6%E5%8F%98%E5%8C%96/</link>
      <pubDate>Mon, 04 Sep 2023 00:29:15 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E4%BF%9D%E7%95%99%E6%96%87%E4%BB%B6%E4%BD%86%E4%B8%8D%E8%B7%9F%E8%B8%AA%E5%85%B6%E5%8F%98%E5%8C%96/</guid>
      <description>
        
          
            摘要： 在 Git 仓库中，有时我们希望将某些文件包含在版本控制中，但不跟踪其变化。本文将介绍如何做到这一点，并提供了一些示例用例。
有时候，我们希望将某些文件包含在 Git 仓库中，但又不希望 Git 跟踪这些文件的变化，例如包含敏感用户信息的文件（如登录凭证）。
对于这种需求，Git 提供了一种解决方案：使用 git update-index 命令来设置文件的标志位。下面是一些示例代码，演示了如何实现。
首先，假设我们有下面的文件列表：
1application/config/production/config.php 2application/config/production/database.php 3application/config/production/tank_auth.php 4/index.php 5/assets/cache/* 6/assets/frontend/css/user/frontend-user.css 我们希望这些文件在仓库中存在，但不跟踪其变化。
我们可以使用以下命令来实现：
1git update-index --assume-unchanged FILE_NAME 这样，这些文件就被标记为“假设未更改”，Git 将不再跟踪它们的变化。如果之后需要恢复对文件的跟踪，可以使用以下命令：
1git update-index --no-assume-unchanged FILE_NAME 需要注意的是，FILE_NAME 是文件的相对路径或绝对路径。
通过以上的方式，我们就可以在 Git 仓库中保留文件，但不跟踪其变化。这样，当我们进行 git pull 操作时，这些文件的变化不会被覆盖掉。
需要特别注意的是，通过上述方式标记的文件将不再出现在 git status 或 git diff 的输出中。这意味着在一些情况下，你可能需要手动检查这些文件的变化并进行相应的操作。
总结一下，通过使用 git update-index 命令来设置文件的标志位，我们可以在 Git 仓库中保留文件，但不跟踪其变化。这为我们提供了一种灵活的方式来管理需要包含但不需要跟踪的文件。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在GitHub上将公共仓库的fork变为私有仓库</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8github%E4%B8%8A%E5%B0%86%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93%E7%9A%84fork%E5%8F%98%E4%B8%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</link>
      <pubDate>Fri, 01 Sep 2023 09:17:24 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8github%E4%B8%8A%E5%B0%86%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93%E7%9A%84fork%E5%8F%98%E4%B8%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</guid>
      <description>
        
          
            摘要 本教程将解释如何在GitHub上将公共仓库的fork变为私有仓库。我们将使用示例代码和GitHub上的操作步骤来说明如何实现这一目标。
内容 在GitHub上，您可以fork公共仓库，并将其变为私有仓库。以下是操作步骤和示例代码：
首先，按照GitHub的指南，fork一个公共仓库到您的帐户中。
在GitHub上创建一个空的私有仓库，作为您fork的仓库的副本。
克隆原始的公共仓库到本地，然后进行配置。
1git clone --bare https://github.com/exampleuser/public-repo.git 2cd public-repo.git 3git push --mirror https://github.com/yourname/private-repo.git 4cd .. 5rm -rf public-repo.git 克隆私有仓库到本地，进行修改。
1git clone https://github.com/yourname/private-repo.git 2cd private-repo 3# 进行一些修改 4git commit 5git push origin master 如果您想从公共仓库中获取更新，可以使用以下命令：
1cd private-repo 2git remote add public https://github.com/exampleuser/public-repo.git 3git pull public master 4git push origin master 通过按照上述步骤进行操作，您可以将公共仓库的fork变为私有仓库，并进行相应的提交和更新。
总结 在本教程中，我们介绍了如何在GitHub上将公共仓库的fork变为私有仓库。通过使用克隆、修改和推送等Git命令，以及在GitHub上进行相应的操作，您可以成功完成这一过程。
感谢您阅读本教程！
请注意，您需要具有相应的订阅才能创建私有仓库。确保您在进行操作之前具备必要的权限。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何解决Git Push出现&#34;Repository not found&#34;错误</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3git-push%E5%87%BA%E7%8E%B0repository-not-found%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 01 Sep 2023 08:03:42 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3git-push%E5%87%BA%E7%8E%B0repository-not-found%E9%94%99%E8%AF%AF/</guid>
      <description>
        
          
            摘要 本教程将介绍如何解决Git Push操作出现&amp;quot;Repository not found&amp;quot;错误的问题。
内容 当执行git push -u origin master命令时，出现&amp;quot;ERROR: Repository not found&amp;quot;错误提示。这可能是由以下原因引起的：
检查是否具有读写权限：请确保您具有对该仓库的读写权限。这可能是您没有在Github上被授权对仓库进行操作的原因。
检查远程origin地址：使用git remote -v命令检查远程origin的地址是否正确。如果origin地址不正确，可以使用以下命令重新设置origin地址：
1git remote rm origin 2git remote add origin git@github.com:account-name/repo-name.git 检查凭据问题：如果您之前使用了错误的凭据进行认证，可以尝试清除凭据并重新认证。具体操作可以参考这个链接：https://help.github.com/articles/updating-credentials-from-the-osx-keychain
检查SSH配置：如果您正在
          
          
        
      </description>
    </item>
    
    <item>
      <title>从git/GitHub的历史记录中删除文件夹及其内容</title>
      <link>https://www.techdocdb.com/posts/%E4%BB%8Egit/github%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E5%85%B6%E5%86%85%E5%AE%B9/</link>
      <pubDate>Fri, 01 Sep 2023 07:20:17 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BB%8Egit/github%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E5%85%B6%E5%86%85%E5%AE%B9/</guid>
      <description>
        
          
            摘要 本教程将解释如何从git/GitHub的历史记录中删除文件夹及其内容。我们将提供使用不同方法的示例来清理git的历史记录，以减少存储库的大小，并确保用户在克隆时只下载所需的文件。
方法介绍 以下是在git/GitHub的历史记录中删除文件夹及其内容的几种方法：
使用git filter-branch命令： 1git filter-branch --tree-filter &amp;#34;rm -rf FOLDER_NAME&amp;#34; --prune-empty HEAD 使用git-filter-repo工具（推荐）： 1git-filter-repo --path FOLDER_NAME --invert-paths 使用BFG Repo-Cleaner工具（不推荐）： 1java -jar bfg.jar --delete-folders FOLDER_NAME 总结 通过使用适当的方法，我们可以从git/GitHub的历史记录中删除文件夹及其内容。面对存储库大小过大的问题时，清理历史记录是一个常见的需求。然而，需要注意的是git filter-branch命令已不再得到官方推荐，因此更推荐使用git-filter-repo工具进行历史记录的清理操作。清理历史记录需要慎重操作，建议提前备份存储库以防意外发生。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何修改一个提交（不改变提交信息）？</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4%E4%B8%8D%E6%94%B9%E5%8F%98%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 31 Aug 2023 05:40:39 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4%E4%B8%8D%E6%94%B9%E5%8F%98%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
      <description>
        
          
            摘要 本教程将介绍如何修改一个提交而不改变提交信息。我们将提供多种方法来实现这个操作，并提供相应的示例代码。
内容 在使用Git进行开发时，修改一个提交而不改变提交信息是一种常见的需求。下面是几种实现这个操作的方法。
方法一：使用--no-edit选项 你可以使用--no-edit选项来修改一个提交而不改变提交信息。在Git版本1.7.9以后，你可以执行以下命令：
1git commit --amend --no-edit 这将使用上一个提交的提交信息来修改当前提交。请注意，这不包括上一个提交中的元数据，比如时间戳或标签。
方法二：使用其他命令 除了--amend选项，还有其他一些命令可以帮助你修改提交信息，比如--C HEAD选项。
方法三：使用别名 你可以创建一个别名，将上述命令封装起来以简化操作。以创建git oops别名为例，你可以执行以下命令：
1git config --global alias.oops &amp;#39;commit --amend --no-edit&amp;#39; 然后使用以下命令来修改提交：
1git oops 这样，你就可以在不改变提交信息的情况下修改提交。
总结 本教程介绍了如何修改一个提交而不改变提交信息。你可以使用--no-edit选项、其他命令或者创建别名的方式来实现这个操作。通过掌握这些技巧，你可以更好地管理和维护你的Git项目。
          
          
        
      </description>
    </item>
    
    <item>
      <title>撤销Git中的stash操作</title>
      <link>https://www.techdocdb.com/posts/%E6%92%A4%E9%94%80git%E4%B8%AD%E7%9A%84stash%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 29 Aug 2023 09:07:55 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E6%92%A4%E9%94%80git%E4%B8%AD%E7%9A%84stash%E6%93%8D%E4%BD%9C/</guid>
      <description>
        
          
            摘要 本教程介绍如何撤销Git中的stash操作。通过示例代码和解释，演示了如何使用正确的Git命令来恢复之前的状态。
内容 如果你在一个尚未提交的项目中执行了stash操作，想要回到stash之前的状态，有一个简单的方法。使用以下命令来恢复stash的修改：
1git stash apply 这个命令将恢复最近的stash修改。如果你想要恢复特定的stash，可以使用stash@{n}，n表示stash的索引。例如：
1git stash apply stash@{2} 这样可以恢复第2个stash的修改。你可以使用git stash list命令来查看所有的stash，并找到需要恢复的索引。
如果你想要同时恢复被暂存（staging）的修改和未暂存（working）的修改，可以使用--index选项：
1git stash apply --index 这个命令会同时恢复被暂存的修改和未暂存的修改。
通过这些命令，你可以轻松地撤销Git中的stash操作，恢复到之前的状态。
总结 通过本教程，我们学习了如何撤销Git中的stash操作。使用git stash apply命令可以恢复最近的stash修改，使用git stash apply stash@{n}命令可以恢复特定的stash修改。如果你还想撤销被暂存的修改，可以使用git stash apply --index命令。根据你的需求，选择适当的命令来恢复stash修改，并回到之前的状态。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Git中从存储区（stash）中提取单个文件（或文件的更改）</title>
      <link>https://www.techdocdb.com/posts/git%E4%B8%AD%E4%BB%8E%E5%AD%98%E5%82%A8%E5%8C%BAstash%E4%B8%AD%E6%8F%90%E5%8F%96%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%94%B9/</link>
      <pubDate>Tue, 29 Aug 2023 05:50:51 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/git%E4%B8%AD%E4%BB%8E%E5%AD%98%E5%82%A8%E5%8C%BAstash%E4%B8%AD%E6%8F%90%E5%8F%96%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%9B%B4%E6%94%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何从Git的存储区（stash）中提取单个文件或文件的更改，而无需弹出存储区的更改集。我们将讨论使用Git命令和Git客户端工具提取单个文件的方法。
内容 在Git中，存储区（stash）允许我们保存当前工作目录的临时更改，以便在后续的开发过程中重新应用。然而，有时我们只需要从存储区中提取单个文件或文件的更改，而无需应用整个更改集。以下是几种方法：
使用Git命令行工具，可以使用以下命令提取存储区中的文件更改：
1git checkout stash@{0} -- &amp;lt;filename&amp;gt; 这将把存储区中的文件更改应用到当前工作目录中的指定文件。
使用Git客户端工具，可以按照以下步骤操作：
打开Git客户端并进入源代码控制（Source Control）选项卡。 点击存储区（Stashes）选项，查看可用的存储区。 选择目标存储区。 右键点击要提取的文件，弹出菜单中选择“Apply Changes”（应用更改）或“Restore (Checkout)”（恢复/检出）选项。 如果选择“Apply Changes”，则所选文件的更改将出现在“Changes”（更改）部分；如果选择“Restore (Checkout)”，则所选文件的更改将出现在“Staged Changes”（暂存更改）部分。 下面是使用Git命令行工具和Git客户端工具分别提取文件的示例代码：
1# 使用Git命令行工具 2git checkout stash@{0} -- filename 3 4# 使用Git客户端工具 5# 请参考客户端工具的界面操作 总结 从Git的存储区中提取单个文件或文件的更改是一个常见的操作。使用Git命令行工具时，可以使用git checkout stash@{0} -- &amp;lt;filename&amp;gt;命令将存储区中的文件更改应用到工作目录中的指定文件。使用Git客户端工具时，可以通过界面操作选择要提取的文件并将其应用到工作目录中。根据个人习惯和偏好，选择适合自己的方法来提取文件更改。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何判断存储项是否存在于GitHub远程仓库？</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AD%98%E5%82%A8%E9%A1%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%BA%8Egithub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Fri, 25 Aug 2023 09:00:58 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AD%98%E5%82%A8%E9%A1%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%BA%8Egithub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>
        
          
            摘要 本教程将介绍如何判断存储项是否存在于GitHub远程仓库。我们将提供示例代码来说明这个问题。
内容 当我们在GitHub上操作时，有时会遇到&amp;quot;fatal: remote origin already exists&amp;quot;的错误提示。这个错误通常表示已经存在同名的远程仓库。在这种情况下，你可以选择更新现有的远程仓库，或者根据需要添加一个新的远程仓库别名。
要更新现有的远程仓库，可以使用以下命令：
1git remote set-url origin git@github.com:ppreyer/first_app.git 这个命令将更新现有的origin远程仓库的URL。如果你不再需要这个远程仓库，可以选择删除它。要删除origin远程仓库，可以使用以下命令：
1git remote rm origin 如果你希望添加一个新的远程仓库别名，而不是使用origin，可以使用以下命令：
1git remote add github git@github.com:ppreyer/first_app.git 在这里，github是新的远程仓库别名，你可以根据自己的需要选择一个合适的别名。在教程中，如果你遇到类似&amp;quot;origin&amp;quot;的远程仓库别名，你需要用你自己的别名替换它。
通过执行上述命令，你可以更新现有的远程仓库、添加新的远程仓库别名或删除不需要的远程仓库。这样就能更好地管理你的远程仓库操作。
总结 本教程介绍了如何在GitHub上判断存储项是否存在于远程仓库。通过更新现有远程仓库、添加新的远程仓库别名或删除不需要的远程仓库，你可以更好地管理你的GitHub操作。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何从Git仓库中删除.DS_Store文件</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8Egit%E4%BB%93%E5%BA%93%E4%B8%AD%E5%88%A0%E9%99%A4.ds_store%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 25 Aug 2023 08:56:28 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8Egit%E4%BB%93%E5%BA%93%E4%B8%AD%E5%88%A0%E9%99%A4.ds_store%E6%96%87%E4%BB%B6/</guid>
      <description>
        
          
            摘要 本教程将介绍如何从Git仓库中删除Mac OS X的.DS_Store文件。我们将提供示例代码来说明这个问题。
内容 如果你想要从Git仓库中删除这些烦人的.DS_Store文件，你可以按照以下步骤进行操作：
从仓库中删除现有的.DS_Store文件：
1find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch 将.DS_Store添加到.gitignore文件中。在项目的顶层目录（如果不存在，可以创建该文件）中，可以执行以下命令：
1echo .DS_Store &amp;gt;&amp;gt; .gitignore 将.gitignore文件提交到仓库：
1git add .gitignore 2git commit -m &amp;#39;.DS_Store banished!&amp;#39; 总结 通过执行以上步骤，你可以从Git仓库中删除.DS_Store文件，并在.gitignore文件中忽略这些文件的后续添加。这将帮助保持仓库的干净和整洁，避免将这些不必要的文件提交到版本控制中。
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用Git递归更新子模块</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8git%E9%80%92%E5%BD%92%E6%9B%B4%E6%96%B0%E5%AD%90%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 25 Aug 2023 07:28:30 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8git%E9%80%92%E5%BD%92%E6%9B%B4%E6%96%B0%E5%AD%90%E6%A8%A1%E5%9D%97/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用Git递归地更新子模块。我们将提供示例代码来说明这个问题。
内容 如果你的项目中包含子模块，并且想要递归地更新所有子模块，你可以使用以下命令：
1git submodule update --init --recursive 这将初始化未初始化的子模块，并递归地更新所有子模块。如果你只需要更新已经初始化的子模块，你可以省略--init选项：
1git submodule update --recursive 需要注意的是，在某些旧版本的Git中，如果使用了--init选项，已经初始化的子模块可能不会被更新。在这种情况下，你可以在不使用--init选项的情况下再运行一次命令。
总结 使用`git submodule update
          
          
        
      </description>
    </item>
    
    <item>
      <title>在.gitignore 文件中可以使用注释</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8.gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Thu, 24 Aug 2023 14:02:13 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8.gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A/</guid>
      <description>
        
          
            摘要 本教程将介绍在.gitignore 文件中如何使用注释。我们将使用示例代码来说明这个过程。
内容 在.gitignore 文件中，可以使用注释来做一些备注或解释。注释必须位于行的开头，并以“#”字符开始。
以下是一个示例：
1# 这是一个注释示例 2# 忽略所有以.a结尾的文件 3*.a 根据 Git 文档的说明，可以在.gitignore 文件中使用注释。注释需要以“#”字符开头，并且可以用来提供更多的信息或解释特定的规则。
注意，注释只能出现在行的开头，并且不能以空格或其他字符开头。
总结 在.gitignore 文件中，可以使用注释来进行备注和解释。注释必须以“#”字符开头，并且只能出现在行的开头。使用注释可以帮助其他开发人员理解特定规则的用途和作用。在配置.gitignore 文件时，注释可以提供更多的上下文和信息。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
