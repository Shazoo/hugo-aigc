<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pandas on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/pandas/</link>
    <description>Recent content in pandas on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 07 Sep 2023 09:15:59 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将Pandas DataFrame转换为字典</title>
      <link>https://www.techdocdb.com/posts/%E5%B0%86pandas-dataframe%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/</link>
      <pubDate>Thu, 07 Sep 2023 09:15:59 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%B0%86pandas-dataframe%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/</guid>
      <description>
        
          
            摘要 本教程将介绍如何将Pandas DataFrame转换为Python字典。通过示例代码演示了如何将DataFrame的行转换为字典的键，并将其他列作为对应键的值。
内容 如果你有一个包含多个列的DataFrame，在转换为字典时，可以按照以下步骤操作：
使用to_dict()方法将DataFrame转换为字典。根据需求选择适当的orient参数，以确定字典的形式。在本例中，我们将使用index作为参数，这样字典的键将是DataFrame的索引值。
为了保留每个键对应的多个值，我们可以使用列表（即嵌套列表）来存储值。可以使用Groupby功能按键对DataFrame进行分组，并将不同列的值添加到列表中。
以下是示例代码：
1result = {k: [g[&amp;#39;A&amp;#39;].tolist(), g[&amp;#39;B&amp;#39;].tolist(), g[&amp;#39;C&amp;#39;].tolist()] for k,g in df.groupby(&amp;#39;ID&amp;#39;)} 2print(result) 这样将创建一个以每个唯一键为键，每个键对应的包含多个列值的列表的字典。
总结 通过使用to_dict()方法和Groupby功能，可以将Pandas DataFrame转换为字典。根据实际需求选择合适的参数和方法，并在操作前了解DataFrame的结构以及数据的一致性。
参考资料：
Pandas官方文档文档 
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用pandas对列进行排序的方法</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8pandas%E5%AF%B9%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 05 Sep 2023 22:39:38 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8pandas%E5%AF%B9%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用pandas对DataFrame的列进行排序。我们将演示如何使用sort_index和reindex_axis方法来按照指定顺序对列进行排序。
内容 如果你想对DataFrame的列按照特定的顺序进行排序，可以使用sort_index和reindex_axis方法。
首先，我们可以使用sort_index方法来按照索引进行排序。sort_index方法可以接收一个axis参数，用于指定按照行还是列进行排序。例如，如果我们要按照列名进行排序，可以使用以下代码：
1df = df.sort_index(axis=1) 如果我们希望按照特定顺序对列进行排序，可以使用reindex_axis方法。reindex_axis方法可以根据指定的列名的顺序重新排序列。以下是一个示例：
1sequence = [&amp;#39;Q1.1&amp;#39;, &amp;#39;Q1.2&amp;#39;, &amp;#39;Q1.3&amp;#39;, ...] 2df = df.reindex_axis(sequence, axis=1) 通过这种方式，你可以按照指定的顺序对DataFrame的列进行重新排序。
总结 使用pandas的sort_index和reindex_axis方法可以对DataFrame的列
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python数据分析：使用pandas在Python 2.7中按多个列排序数据帧</title>
      <link>https://www.techdocdb.com/posts/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8pandas%E5%9C%A8python-2.7%E4%B8%AD%E6%8C%89%E5%A4%9A%E4%B8%AA%E5%88%97%E6%8E%92%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%B8%A7/</link>
      <pubDate>Tue, 05 Sep 2023 21:07:37 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8pandas%E5%9C%A8python-2.7%E4%B8%AD%E6%8C%89%E5%A4%9A%E4%B8%AA%E5%88%97%E6%8E%92%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%B8%A7/</guid>
      <description>
        
          
            概要 在Python的数据分析中，经常需要根据多个列对数据进行排序
          
          
        
      </description>
    </item>
    
    <item>
      <title>从pandas数据帧的列或行获取列表</title>
      <link>https://www.techdocdb.com/posts/%E4%BB%8Epandas%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%9A%84%E5%88%97%E6%88%96%E8%A1%8C%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8/</link>
      <pubDate>Mon, 04 Sep 2023 05:52:14 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BB%8Epandas%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%9A%84%E5%88%97%E6%88%96%E8%A1%8C%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8/</guid>
      <description>
        
          
            摘要 本教程将介绍如何从pandas数据帧的列或行中获取列表。在使用pandas进行数据处理和分析时，经常需要将数据帧的特定列或行提取为列表，以便进行进一步的操作。本教程将给出几种方法来实现从数据帧提取列表的操作。
内容 在pandas中，可以使用以下几种方法从数据帧的列或行中获取列表：
方法一：使用tolist()方法
使用tolist()方法可以将pandas的Series对象转换为Python列表。例如：
1import pandas as pd 2 3data_dict = {&amp;#39;one&amp;#39;: pd.Series([1, 2, 3], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]), 4 &amp;#39;two&amp;#39;: pd.Series([1, 2, 3, 4], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])} 5 6df = pd.DataFrame(data_dict) 7 8column_one_list = df[&amp;#39;one&amp;#39;].tolist() 9 10print(column_one_list) 方法二：使用values属性
1column_one_list = df[&amp;#39;one&amp;#39;].values.tolist() 在上述示例中，我们使用values属性获取列的值，并使用tolist()方法将其转换为列表。
方法三：使用values属性和reshape()方法
1import numpy as np 2 3column_one_list = df[&amp;#39;one&amp;#39;].values.reshape(1, -1).ravel().tolist() 在上述示例中，我们使用values属性获取列的值，并使用reshape()方法将其重塑为numpy数组，然后使用ravel()方法展平数组，并最后使用tolist()方法将其转换为列表。
无论选择哪种方法，都可以从数据帧的列或行中获取列表，并进行后续的操作。
总结
在pandas中，我们可以使用tolist()方法或values属性配合tolist()方法来从数据帧的列或行中获取列表。根据实际需求选择合适的方法进行操作。
          
          
        
      </description>
    </item>
    
    <item>
      <title>逐行添加Pandas Dataframe</title>
      <link>https://www.techdocdb.com/posts/%E9%80%90%E8%A1%8C%E6%B7%BB%E5%8A%A0pandas-dataframe/</link>
      <pubDate>Mon, 28 Aug 2023 08:05:56 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E9%80%90%E8%A1%8C%E6%B7%BB%E5%8A%A0pandas-dataframe/</guid>
      <description>
        
          
            摘要 本教程将解释如何按顺序逐行添加Pandas Dataframe。通过示例代码，我们将阐明问题的具体场景和解决方案。
内容 有时候我们需要创建一个空的Dataframe，然后逐行添加数据。
首先，我们可以创建一个空的Dataframe：
1df = pd.DataFrame(columns=(&amp;#39;lib&amp;#39;, &amp;#39;qty1&amp;#39;, &amp;#39;qty2&amp;#39;)) 然后，我们可以使用df.loc[i]来添加新的行，其中i是要添加的行的索引，可以根据需要进行指定。
例如，可以使用以下代码循环添加多行数据：
1import pandas as pd 2from numpy.random import randint 3 4df = pd.DataFrame(columns=[&amp;#39;lib&amp;#39;, &amp;#39;qty1&amp;#39;, &amp;#39;qty2&amp;#39;]) 5 6for i in range(5): 7 df.loc[i] = [&amp;#39;name&amp;#39; + str(i)] + list(randint(10, size=2)) 通过循环逐行添加数据，我们可以构建一个完整的Dataframe。
总结 通过循环逐行添加数据可以构建完整的Pandas Dataframe。只需使用df.loc[i]，其中i是要添加的行的索引，可以循环使用该方法来逐行添加数据。希望通过本教程，您对逐行添加Pandas Dataframe有了更好的理解。
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用.otf 字体在网页中</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8.otf-%E5%AD%97%E4%BD%93%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD/</link>
      <pubDate>Thu, 24 Aug 2023 16:15:55 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8.otf-%E5%AD%97%E4%BD%93%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在网页中使用.otf 字体。我们将使用示例代码来说明这个过程。
内容 如果你需要在网页中使用.otf 字体，可以使用@font-face 规则来嵌入字体并在网页中使用。下面是一个示例代码：
1@font-face { 2 font-family: &amp;#39;YourFontName&amp;#39;; 3 src: url(&amp;#39;path/your-font.otf&amp;#39;) format(&amp;#39;opentype&amp;#39;); 4} 在以上代码中，我们使用@font-face 规则指定了字体文件的路径和格式。然后，你可以在网页中使用这种字体：
1body { 2 font-family: &amp;#39;YourFontName&amp;#39;, sans-serif; 3} 在这个示例中，我们将字体文件的路径和格式指定为.otf，并使用@font-face 规则嵌入字体。然后，我们将这种字体应用于整个网页的 body 元素。
请注意，为了使字体在所有浏览器中正常工作，你可能需要提供其他字体格式的备用选项，例如.woff 或.ttf 格式。这样可以确保在不同的浏览器上都可以正常显示字体。
总结 通过使用@font-face 规则，你可以在网页中使用.otf 字体。可以指定字体文件的路径和格式，并将其嵌入到网页中。如果需要在不同的浏览器上都正常显示字体，可以提供其他字体格式的备用选项。使用这种方法，你可以实现在网页中使用自定义.otf 字体。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
