<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>express on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/express/</link>
    <description>Recent content in express on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 08:41:19 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用&#34;by lazy&#34;和&#34;lateinit&#34;进行属性初始化</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8by-lazy%E5%92%8Clateinit%E8%BF%9B%E8%A1%8C%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 11 Sep 2023 08:41:19 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8by-lazy%E5%92%8Clateinit%E8%BF%9B%E8%A1%8C%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>
        
          
            摘要 本教程将解释如何在Kotlin中使用&amp;quot;by lazy&amp;quot;和&amp;quot;lateinit&amp;quot;进行属性初始化。原始问答中给出了使用lazy和lateinit进行属性初始化的示例。我们将比较这两种方法的不同，并解释它们的用途和区别。
内容 引言 在Kotlin中，如果您不想在构造函数或类体的顶部初始化类属性，您可以使用以下两种选项：lazy初始化和lateinit修饰符。
使用&amp;quot;by lazy&amp;quot;进行延迟初始化 使用&amp;quot;by lazy&amp;quot;语法，您可以在第一次访问属性时进行延迟初始化。&amp;quot;by lazy&amp;quot;创建一个Lazy实例，在第一次调用属性的get()方法时执行lambda表达式，并记住结果。随后的调用只会返回记住的结果。
以下是使用&amp;quot;by lazy&amp;quot;进行延迟初始化的示例：
1public class Hello { 2 val myLazyString: String by lazy { &amp;#34;Hello&amp;#34; } 3} 第一次调用和后续的调用，无论在何处，myLazyString都将返回&amp;quot;Hello&amp;quot;。
使用&amp;quot;lateinit&amp;quot;进行延迟初始化 使用&amp;quot;lateinit&amp;quot;修饰符，您可以将属性标记为在类的其他位置进行延迟初始化。&amp;quot;lateinit&amp;quot;属性必须是可变的类型（var），不能是可为空的类型，并且不能是原始类型。lateinit属性具有一个后备字段，用于存储值，并且不能拥有自定义的getter或setter。因此，如果需要后备字段，请使用&amp;quot;lateinit&amp;quot;。
以下是使用&amp;quot;lateinit&amp;quot;进行延迟初始化的示例：
1public class MyTest { 2 lateinit var subject: TestSubject 3 4 @SetUp fun setup() { subject = TestSubject() } 5 6 @Test fun test() { subject.method() } 7} 需要注意的是，lateinit属性必须在类体中声明，不能在主构造函数中声明，并且不能具有自定义的getter或setter。属性的类型必须是非空的，不能是原始类型。
如何选择&amp;quot;by lazy&amp;quot;和&amp;quot;lateinit&amp;quot; 在选择&amp;quot;by lazy&amp;quot;和&amp;quot;lateinit&amp;quot;时，取决于您的需求。以下是两种选项之间的主要区别和用途：
&amp;quot;by lazy&amp;quot;只能用于val属性，而&amp;quot;lateinit&amp;quot;只能用于var属性，因为&amp;quot;lateinit&amp;quot;无法编译为final字段，因此无法保证不可变性。 &amp;quot;lateinit&amp;quot;具有用于存储值的后备字段，而&amp;quot;by lazy&amp;quot;在代理对象中存储值。如果需要后备字段，请使用&amp;quot;lateinit&amp;quot;。 除了val属性外，&amp;quot;lateinit&amp;quot;不能用于可为空的属性或原始类型。 &amp;quot;lateinit var&amp;quot;可以从类中的任何位置进行初始化，即使在多个线程中也可以。而&amp;quot;by lazy&amp;quot;定义了属性的唯一初始化器，只能通过在子类中重写属性来更改初始化器。如果希望在外部以可能预先未知的方式初始化属性，请使用&amp;quot;lateinit&amp;quot;。 &amp;quot;by lazy&amp;quot;的初始化在默认情况下是线程安全的，并且保证初始化器最多只调用一次。而对于&amp;quot;lateinit var&amp;quot;，在多线程环境中，根据用户的代码，负责正确初始化属性。 &amp;quot;Lazy&amp;quot;实例可以保存、传递和用于多个属性。相反，&amp;quot;lateinit var&amp;quot;不存储任何额外的运行时状态，只有一个未初始化值的字段。 如果保留对&amp;quot;Lazy&amp;quot;实例的引用，可以使用isInitialized()方法检查属性是否已初始化。要检查&amp;quot;lateinit&amp;quot;属性是否已初始化，可以使用property::isInitialized()。 此外，还有一种未在问题中提到的方式：&amp;quot;Delegates.
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Express.js中获取远程客户端IP地址</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8express.js%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AFip%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Wed, 06 Sep 2023 15:58:41 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8express.js%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AFip%E5%9C%B0%E5%9D%80/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在Express.js中获取远程客户端的IP地址。当我们使用Express.js构建Web应用时，有时需要获取发送请求的客户端的真实IP地址。我们将提供示例代码来演示如何在Express.js中获取远程客户端的IP地址。
方法介绍 由于Express.js应用可能会运行在反向代理（如Nginx）之后，所以我们不能直接使用req.connection.remoteAddress来获取客户端IP地址。相反，我们需要查看请求头中的特定字段来获取客户端的真实IP地址。以下是一些常用的字段：
x-forwarded-for: 包含客户端的真实IP地址，如果有多个代理，则IP地址以逗号分隔。我们可以通过解析该字段获取客户端的IP地址。 x-real-ip: 一些代理服务器（如Nginx）将客户端的真实IP地址存储在该字段中。 示例 以下是在Express.js中获取远程客户端IP地址的示例代码：
1app.get(&amp;#39;/&amp;#39;, function (req, res) { 2 var ip = req.headers[&amp;#39;x-forwarded-for&amp;#39;] || req.headers[&amp;#39;x-real-ip&amp;#39;] || req.connection.remoteAddress; 3 console.log(&amp;#39;Remote client IP:&amp;#39;, ip); 4}); 总结 通过本教程，我们了解了在Express.js中获取远程客户端IP地址的方法。我们可以通过查看请求头中的特定字段，如x-forwarded-for和x-real-ip，来获取客户端的真实IP地址。在实际应用中，我们可以根据需要选择合适的字段来获取客户端IP地址，并进行相应的处理。获取远程客户端IP地址对于分析访问日志、实现IP限制等功能非常重要。在开发Express.js应用时，我们应该了解如何获取并使用客户端的真实IP地址。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Node.js中从一个函数调用另一个函数</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8node.js%E4%B8%AD%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 31 Aug 2023 06:02:40 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8node.js%E4%B8%AD%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/</guid>
      <description>
        
          
            摘要 本文将介绍如何在Node.js中的module.exports声明中从一个函数调用另一个函数。
内容 如果你想从一个函数中调用另一个函数，可以在module.exports声明中采取以下方法：
1module.exports = { 2 3 foo: function (req, res, next) { 4 return (&amp;#39;foo&amp;#39;); 5 }, 6 7 bar: function(req, res, next) { 8 module.exports.foo(); 9 } 10 11} 示例 以下是从一个函数调用另一个函数的示例代码：
1var bla = require(&amp;#39;./bla.js&amp;#39;); 2console.log(bla.bar()); 在上述示例中，我们通过require语句引入了bla.js模块，并在调用bla.bar()时从bar函数中间接调用了foo函数。
总结 你可以在Node.js的module.exports声明中，通过在另一个函数中使用module.exports.foo()来调用另一个函数。这种方法允许我们在模块的导出对象中间接调用函数。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
