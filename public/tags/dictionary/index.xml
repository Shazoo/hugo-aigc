<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dictionary on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/dictionary/</link>
    <description>Recent content in dictionary on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 07 Sep 2023 09:15:59 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/dictionary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将Pandas DataFrame转换为字典</title>
      <link>https://www.techdocdb.com/posts/%E5%B0%86pandas-dataframe%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/</link>
      <pubDate>Thu, 07 Sep 2023 09:15:59 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%B0%86pandas-dataframe%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/</guid>
      <description>
        
          
            摘要 本教程将介绍如何将Pandas DataFrame转换为Python字典。通过示例代码演示了如何将DataFrame的行转换为字典的键，并将其他列作为对应键的值。
内容 如果你有一个包含多个列的DataFrame，在转换为字典时，可以按照以下步骤操作：
使用to_dict()方法将DataFrame转换为字典。根据需求选择适当的orient参数，以确定字典的形式。在本例中，我们将使用index作为参数，这样字典的键将是DataFrame的索引值。
为了保留每个键对应的多个值，我们可以使用列表（即嵌套列表）来存储值。可以使用Groupby功能按键对DataFrame进行分组，并将不同列的值添加到列表中。
以下是示例代码：
1result = {k: [g[&amp;#39;A&amp;#39;].tolist(), g[&amp;#39;B&amp;#39;].tolist(), g[&amp;#39;C&amp;#39;].tolist()] for k,g in df.groupby(&amp;#39;ID&amp;#39;)} 2print(result) 这样将创建一个以每个唯一键为键，每个键对应的包含多个列值的列表的字典。
总结 通过使用to_dict()方法和Groupby功能，可以将Pandas DataFrame转换为字典。根据实际需求选择合适的参数和方法，并在操作前了解DataFrame的结构以及数据的一致性。
参考资料：
Pandas官方文档文档 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python中的defaultdict与普通字典的区别</title>
      <link>https://www.techdocdb.com/posts/python%E4%B8%AD%E7%9A%84defaultdict%E4%B8%8E%E6%99%AE%E9%80%9A%E5%AD%97%E5%85%B8%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 03 Sep 2023 20:55:28 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/python%E4%B8%AD%E7%9A%84defaultdict%E4%B8%8E%E6%99%AE%E9%80%9A%E5%AD%97%E5%85%B8%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 Python中的defaultdict是collections类中的一种容器。它与普通的字典容器在使用上有所不同。本教程将介绍defaultdict的用法和与普通字典的区别，并提供一些示例代码来演示。
内容 在Python中，默认的字典（dict）容器在尝试获取一个不存在的键（key）时，会抛出KeyError异常。而defaultdict则不同，它会根据传入的参数来创建一个默认值，而不抛出异常。我们可以通过给defaultdict传递一个可调用对象（比如函数）来设置默认值。
下面是相关示例代码：
1from collections import defaultdict 2 3# 示例1：使用int作为默认值 4s = &amp;#39;mississippi&amp;#39; 5d = defaultdict(int) 6for k in s: 7 d[k] += 1 8print(d.items()) # 输出：dict_items([(&amp;#39;m&amp;#39;, 1), (&amp;#39;i&amp;#39;, 4), (&amp;#39;s&amp;#39;, 4), (&amp;#39;p&amp;#39;, 2)]) 9 10# 示例2：使用list作为默认值 11s = [(&amp;#39;yellow&amp;#39;, 1), (&amp;#39;blue&amp;#39;, 2), (&amp;#39;yellow&amp;#39;, 3), (&amp;#39;blue&amp;#39;, 4), (&amp;#39;red&amp;#39;, 1)] 12d = defaultdict(list) 13for k, v in s: 14 d[k].append(v) 15print(d.items()) # 输出：dict_items([(&amp;#39;blue&amp;#39;, [2, 4]), (&amp;#39;red&amp;#39;, [1]), (&amp;#39;yellow&amp;#39;, [1, 3])]) 在示例1中，我们使用int作为默认值，当访问一个不存在的键时，会返回整数类型的默认值0。在示例2中，我们使用list作为默认值，当访问一个不存在的键时，会返回一个空列表。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
