<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>authentication on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/authentication/</link>
    <description>Recent content in authentication on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Sep 2023 06:21:16 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么OAuth2中需要“Authorization Code”流程而“Implicit”流程已经很好用了</title>
      <link>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88oauth2%E4%B8%AD%E9%9C%80%E8%A6%81authorization-code%E6%B5%81%E7%A8%8B%E8%80%8Cimplicit%E6%B5%81%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%BE%88%E5%A5%BD%E7%94%A8%E4%BA%86/</link>
      <pubDate>Mon, 04 Sep 2023 06:21:16 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88oauth2%E4%B8%AD%E9%9C%80%E8%A6%81authorization-code%E6%B5%81%E7%A8%8B%E8%80%8Cimplicit%E6%B5%81%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%BE%88%E5%A5%BD%E7%94%A8%E4%BA%86/</guid>
      <description>
        
          
            摘要 本教程将介绍为什么在OAuth2中存在“Authorization Code”流程，以及为什么不仅使用“Implicit”流程来处理认证和授权。您将了解不同流程的设计考虑因素以及它们在安全性和实现上的差异。
内容 在OAuth2中，有两种常见的流程用于进行认证和授权：Authorization Code流程和Implicit流程。虽然这两种流程都可以获得访问令牌，但它们在设计和用途上存在一些差异。
Implicit流程 Implicit流程适用于需要通过简化的方式获得访问令牌的场景。在这种流程中，客户端（通常是浏览器）在资源所有者（用户）授权后直接获得访问令牌。这个流程相对简单明了，但安全性方面存在一些考量。
设计考虑因素： 访问令牌直接传递给客户端，并且仅由浏览器端JavaScript使用，避免了中间服务器或路由器的访问和拦截。 浏览器本身具有隔离环境，使得其他应用无法访问访问令牌。 仅适用于需要临时访问权限的场景，因为访问令牌的有效期相对较短。 Authorization Code流程 Authorization Code流程适用于需要更高安全性的场景，特别是服务器端应用程序。在这个流程中，客户端（通常是Web服务器）只能获取到授权码（authorization code），需要通过使用客户端ID和客户端密钥以及授权码向API服务器发起另一个请求以获取访问令牌。这个流程相对复杂，但提供了更高级的安全保护。
设计考虑因素： 为了避免访问令牌被中间服务器拦截，授权码作为一次性的中间码传递给客户端，并且只有合法的接收方才能使用该授权码（因为需要客户端密钥）。 通过授权码交换访问令牌，避免了在URL参数中直接传递访问令牌，因为URL参数可能会被中间服务器和路由器读取和拦截。 需要进行额外的安全检查，比如验证授权码和访问令牌是否与客户端ID匹配，以避免恶意攻击。 安全性与实现 Implicit流程相对简单，但安全性不如Authorization Code流程，因为在URL中直接传递访问令牌可能存在泄漏的风险。而Authorization Code流程可以更好地控制访问令牌的传递，避免了直接暴露访问令牌。
对于需要更高级安全保护并且需要在服务器端进行访问令牌处理的场景，使用Authorization Code流程是更合适的选择。对于仅需要临时访问权限并且在客户端（例如浏览器）中运行的应用程序，可以选择使用Implicit流程。
总结 OAuth2中存在“Authorization Code”流程的原因是为了提供更高级的安全保护，并允许更复杂的授权和认证操作。虽然Implicit流程在某些情况下更简单方便，但安全性上存在一些考虑。因此，根据具体的应用场景和安全需求，选择合适的授权流程非常重要。
参考文献：
OAuth 2.0 授权框架（RFC 6749）：https://tools.ietf.org/html/rfc6749 Aaron Parecki&#39;s OAuth 2.0 简化流程：https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
