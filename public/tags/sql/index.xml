<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/sql/</link>
    <description>Recent content in sql on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 12 Sep 2023 10:28:28 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Insert text with single quotes in PostgreSQL</title>
      <link>https://www.techdocdb.com/posts/insert-text-with-single-quotes-in-postgresql/</link>
      <pubDate>Tue, 12 Sep 2023 10:28:28 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/insert-text-with-single-quotes-in-postgresql/</guid>
      <description>
        
          
            在使用 PostgreSQL 数据库时，如果需要在值中插入单引号 &#39;，需要使用两个相邻的单引号 &#39;&#39; 进行转义。下面是两种常用的转义方式：
使用两个单引号 &#39;&#39; 进行转义，这是标准的转义方式，如下所示： 1&amp;#39;user&amp;#39;&amp;#39;s log&amp;#39; -- 正确的语法 需要注意的是，这里使用的是普通的单引号（ASCII / UTF-8 码 39），而不是反引号 &#39;&#39;（在某些其他 RDBMS 中有特殊用途）和双引号 &amp;quot;`（用于标识符）。
如果你使用的是旧版本的 PostgreSQL 或者启用了 standard_conforming_strings = off 参数，或者想要使用 Posix 转义字符串语法，可以在字符串前面加上 E 来声明，然后使用反斜杠 \ 进行转义，如下所示： 1E&amp;#39;user\&amp;#39;s log&amp;#39; 这种方式可以用于转义反斜杠本身，但一般情况下不推荐使用。
如果需要处理大量单引号或多层转义的情况，可以使用 PostgreSQL 中的 dollar-quoted strings，它可以避免引号的困扰，如下所示：
1&amp;#39;escape &amp;#39;&amp;#39; with &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39; 2$$escape &amp;#39; with &amp;#39;&amp;#39;$$ 为了避免混淆，可以给每对 dollar-quoted strings 添加一个唯一的标记，如下所示：
1$token$escape &amp;#39; with &amp;#39;&amp;#39;$token$ 这样可以无限嵌套使用。
需要注意的是，在客户端软件中，$ 字符可能具有特殊含义，可能需要进行额外的转义。但在标准的 PostgreSQL 客户端（如 psql 或 pgAdmin）中，不需要进行额外转义。
总之，在编写 PL/pgSQL 函数或临时 SQL 命令时，这些方法都非常有用。但是，在应用程序中如果需要处理用户输入，为了防止 SQL 注入等安全问题，仍然需要使用预编译语句或其他安全防护措施。
          
          
        
      </description>
    </item>
    
    <item>
      <title>VARCHAR与CHAR在MySQL中的区别</title>
      <link>https://www.techdocdb.com/posts/varchar%E4%B8%8Echar%E5%9C%A8mysql%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Sep 2023 10:23:18 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/varchar%E4%B8%8Echar%E5%9C%A8mysql%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将介绍VARCHAR和CHAR在MySQL中的差异。通过解释和示例代码，展示了这两个数据类型的特点和用法。
内容 在MySQL中，VARCHAR和CHAR是常用的字符串数据类型。以下是它们之间的区别：
CHAR CHAR是固定长度的字符数据类型，字段所占用的空间固定。 CHAR占用的存储空间为每个字符一个字节。例如，一个CHAR(10)字段将占用10个字节的空间，无论实际存储的文本长度是多少。 VARCHAR VARCHAR是可变长度的字符数据类型，字段所占用的空间根据存储的实际文本长度进行动态分配。 VARCHAR占用的存储空间为每个字符一个字节，再加上2个字节用于存储长度信息。例如，如果将一个字符串存储在VARCHAR(100)字段中，实际占用空间将根据文本长度进行计算。 根据具体情况，可以根据以下准则选择使用CHAR或VARCHAR：
如果字段的取值具有固定长度，使用CHAR可以节省存储空间并提高访问效率。 如果字段的取值长度存在较大的变化，使用VARCHAR可以灵活地进行存储，减少空间的浪费。 需要注意的是， CHAR和VARCHAR也可以在某些情况下与文本数据类型一起使用，但文本数据类型通常更适合存储变长文本。
总结 在MySQL中，VARCHAR和CHAR是字符串数据类型，具有不同的特点和用法。根据字段取值的特点和需求，选择合适的数据类型可以充分利用存储空间并提高数据库的性能。
          
          
        
      </description>
    </item>
    
    <item>
      <title>PostgreSQL-9.2数据库大小查询命令</title>
      <link>https://www.techdocdb.com/posts/postgresql-9.2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E5%B0%8F%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 11 Sep 2023 15:41:59 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/postgresql-9.2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E5%B0%8F%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</guid>
      <description>
        
          
             摘要 本教程介绍了如何使用PostgreSQL-9.2来查询数据库的大小。通过示例和详细说明，帮助读者了解如何使用不同的方法来获取数据库的大小信息。
内容 PostgreSQL是一种非常流行的关系型数据库管理系统，可以用来存储和管理大量的数据。在进行数据库管理和优化时，了解数据库的大小是非常重要的。在PostgreSQL-9.2中，有多种方法可以查询数据库的大小。
以下是一些常见的方法和示例：
使用SELECT语句查询特定数据库的大小： 1SELECT pg_size_pretty(pg_database_size(&amp;#39;databaseName&amp;#39;)) AS &amp;#34;db_size&amp;#34;; 查询所有数据库的名称和大小： 1SELECT t1.datname AS &amp;#34;db_name&amp;#34;, 2 pg_size_pretty(pg_database_size(t1.datname)) AS &amp;#34;db_size&amp;#34; 3FROM pg_database t1 4ORDER BY pg_database_size(t1.datname) DESC; 使用psql元命令查询数据库大小： 1\l+ 使用pgAdmin查询数据库大小：
打开pgAdmin，并连接到服务器。 点击数据库名称，并选择统计选项卡，可以在列表末尾看到数据库的大小。 可以轻松查看多个数据库的大小。 通过将查询结果作为机器输出来查询数据库大小：
1\l+ &amp;lt;database_name&amp;gt; 注意：在使用这些方法时，请确保拥有足够的权限来访问数据库和执行相应的查询。
总结 通过本教程，我们学习了如何使用PostgreSQL-9.2来查询数据库的大小。我们介绍了几种不同的方法，包括使用SELECT语句、psql元命令和pgAdmin工具。每种方法都有其优点和适用场景，读者可以根据实际需求选择合适的方法。
了解数据库的大小是数据库管理和优化的重要一步，通过掌握这些方法，读者可以更好地了解和管理他们的PostgreSQL数据库。
参考来源：
https://stackoverflow.com/questions/2596624/how-do-you-find-the-disk-size-of-a-postgres-postgresql-table-and-its-indexes#answer-18985810 https://www.postgresql.org/docs/current/app-psql.html PostgreSQL wiki dbrnd.com 
          
          
        
      </description>
    </item>
    
    <item>
      <title>在SQL中选择多个列的不重复值</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8sql%E4%B8%AD%E9%80%89%E6%8B%A9%E5%A4%9A%E4%B8%AA%E5%88%97%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%80%BC/</link>
      <pubDate>Mon, 11 Sep 2023 14:55:59 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8sql%E4%B8%AD%E9%80%89%E6%8B%A9%E5%A4%9A%E4%B8%AA%E5%88%97%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%80%BC/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在SQL中选择多个列的不重复值。我们将讨论使用DISTINCT关键字、GROUP BY子句以及嵌套查询来实现这个目标，并提供具体的代码示例和说明。
内容 有时候我们需要从一个表中的多个列中选择不重复的值。以下是几种方法可以实现这个目标：
使用DISTINCT关键字：
我们可以使用DISTINCT关键字来选择多个列的不重复值。以下是一个使用DISTINCT关键字的例子：
1SELECT DISTINCT col1, col2 FROM table 这会返回根据多个列组合而不重复的行。
使用GROUP BY子句：
另一种方法是使用GROUP BY子句来对多个列进行分组，并选择每个组的第一行。以下是一个使用GROUP BY子句的例子：
1SELECT col1, col2 2FROM table 3GROUP BY col1, col2 这将返回每个组的第一行，并保证结果中没有重复值。
使用嵌套查询：
我们还可以使用嵌套查询来选择不重复的多个列。以下是一个使用嵌套查询的例子：
1SELECT DISTINCT * 2FROM (SELECT col1, col2 FROM table) AS x 首先，内部查询选择了多个列的值，然后外部查询使用DISTINCT关键字选择不重复的行。
根据具体的需求和数据库管理系统，选择合适的方法来选择多个列的不重复值。以上方法都可以实现这个目标，根据实际情况选择最适合的方法。
参考文献：
Microsoft Documentation - DISTINCT Microsoft Documentation - GROUP BY 
          
          
        
      </description>
    </item>
    
    <item>
      <title>在关系数据库中存储分层数据的选项</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E5%88%86%E5%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%89%E9%A1%B9/</link>
      <pubDate>Mon, 11 Sep 2023 08:42:24 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E5%88%86%E5%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%89%E9%A1%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在关系数据库中存储分层数据的选项。我们将介绍不同的存储方法，如邻接表、嵌套集模型、桥接表和线性列等，以及它们的优缺点。
内容 在关系数据库中存储分层数据可能存在一些挑战，但是有几种方法可以解决这个问题。下面是一些常用的选项：
邻接表（Adjacency List） 邻接表是一种简单而直观的方法，它使用一个包含父节点ID的列来表示层级关系。每个节点在表中都有一行，该行包含其自身ID和父节点ID。
列： ID：节点的唯一标识符 ParentID：父节点的ID 例如，以下是一个使用邻接表存储的示例：
1CREATE TABLE categories ( 2 ID INT PRIMARY KEY, 3 ParentID INT, 4 Name VARCHAR(100) 5); 对于上述模式，我们可以这样插入数据：
1INSERT INTO categories (ID, ParentID, Name) 2VALUES (1, NULL, &amp;#39;ELECTRONICS&amp;#39;), 3 (2, 1, &amp;#39;TELEVISIONS&amp;#39;), 4 (3, 2, &amp;#39;TUBE&amp;#39;), 5 (4, 2, &amp;#39;LCD&amp;#39;), 6 (5, 2, &amp;#39;PLASMA&amp;#39;), 7 (6, 1, &amp;#39;PORTABLE ELECTRONICS&amp;#39;), 8 (7, 6, &amp;#39;MP3 PLAYERS&amp;#39;), 9 (8, 7, &amp;#39;FLASH&amp;#39;), 10 (9, 6, &amp;#39;CD PLAYERS&amp;#39;), 11 (10, 6, &amp;#39;2 WAY RADIOS&amp;#39;); 使用邻接表可以轻松地查询父节点、子节点和层级关系。例如，要获取所有子节点，可以执行以下查询：
          
          
        
      </description>
    </item>
    
    <item>
      <title>SQL Server中查询大于指定日期的所有日期</title>
      <link>https://www.techdocdb.com/posts/sql-server%E4%B8%AD%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E7%9A%84%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F/</link>
      <pubDate>Sun, 10 Sep 2023 16:33:04 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/sql-server%E4%B8%AD%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E7%9A%84%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F/</guid>
      <description>
        
          
            在SQL Server中，如果我们要查询大于某个日期的所有日期，我们需要注意日期的比较方式和格式。本文将介绍如何正确查询大于指定日期的所有日期，并提供了一些示例来说明。
摘要 当我们使用以下查询时，可能会导致无法得到期望的结果：
1SELECT * 2FROM dbo.March2010 A 3WHERE A.Date &amp;gt;= 2010-04-01; 在这种查询中，2010-4-01被视为数学表达式，实际上读取的是：
1SELECT * 2FROM dbo.March2010 A 3WHERE A.Date &amp;gt;= 2005; 为了避免这个问题，我们需要将日期转换为正确的datetime格式，并使用单引号括起来。
内容 以下是正确查询大于指定日期的所有日期的示例：
1SELECT * 2FROM dbo.March2010 A 3WHERE A.Date &amp;gt;= Convert(datetime, &amp;#39;2010-04-01&amp;#39;); 在这个示例中，我们使用了Convert函数将日期字符串转换为datetime类型，并使用单引号将日期字符串括起来。
另外，如果我们想要更加简洁的查询方式，也可以使用以下查询语句：
1SELECT * 2FROM dbo.March2010 A 3WHERE A.Date &amp;gt;= &amp;#39;2010-04-01&amp;#39;; 这种方式的查询语句会自动将日期字符串转换为正确的datetime类型。
总结 通过本文的介绍，我们知道了在SQL Server中查询大于指定日期的所有日期的正确方式。我们需要将日期字符串转换为datetime类型，并使用单引号括起来。我们还提供了多种示例，供读者参考和使用。
因此，在SQL Server中查询大于指定日期的所有日期时，请根据本文介绍的方式进行操作，以获得正确的查询结果。
          
          
        
      </description>
    </item>
    
    <item>
      <title>解析平面表为树的最高效/优雅的方法是什么？</title>
      <link>https://www.techdocdb.com/posts/%E8%A7%A3%E6%9E%90%E5%B9%B3%E9%9D%A2%E8%A1%A8%E4%B8%BA%E6%A0%91%E7%9A%84%E6%9C%80%E9%AB%98%E6%95%88/%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sat, 09 Sep 2023 09:34:25 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E8%A7%A3%E6%9E%90%E5%B9%B3%E9%9D%A2%E8%A1%A8%E4%B8%BA%E6%A0%91%E7%9A%84%E6%9C%80%E9%AB%98%E6%95%88/%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>
        
          
            假设你有一个存储有序树层次结构的平面表：
1Id Name ParentId Order 2 1 &amp;#39;Node 1&amp;#39; 0 10 3 2 &amp;#39;Node 1.1&amp;#39; 1 10 4 3 &amp;#39;Node 2&amp;#39; 0 20 5 4 &amp;#39;Node 1.1.1&amp;#39; 2 10 6 5 &amp;#39;Node 2.1&amp;#39; 3 10 7 6 &amp;#39;Node 1.2&amp;#39; 1 20 你可以通过以下方式将其正确排序、正确缩进到HTML（或文本）中：
根节点0是虚构的根节点。
下面是一个图表，其中我们使用[id] Name。
1 [0] ROOT 2 / \ 3 [1] Node 1 [3] Node 2 4 / \ \ 5 [2] Node 1.1 [6] Node 1.2 [5] Node 2.
          
          
        
      </description>
    </item>
    
    <item>
      <title>&lt;html&gt;</title>
      <link>https://www.techdocdb.com/posts/html/</link>
      <pubDate>Fri, 08 Sep 2023 10:26:49 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/html/</guid>
      <description>
        
          
            504 Gateway Time-out 504 Gateway Time-out nginx 
          
          
        
      </description>
    </item>
    
    <item>
      <title>在MySQL中如何进行区分大小写的字符串比较？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</link>
      <pubDate>Fri, 08 Sep 2023 01:20:11 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8mysql%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</guid>
      <description>
        
          
            摘要 本文介绍了在MySQL中如何进行区分大小写的字符串比较。
内容 有时候我们需要在MySQL中进行区分大小写的字符串比较。以下是几种实现区分大小写字符串比较的方法：
使用BINARY关键字
1SELECT * FROM `table` WHERE BINARY `column` = &amp;#39;value&amp;#39; 这个方法使用BINARY关键字对进行比较的列和值进行二进制比较，从而实现区分大小写的比较。
使用COLLATE关键字
1SELECT * FROM `table` WHERE `column` COLLATE utf8_bin = &amp;#39;value&amp;#39; 这个方法使用COLLATE关键字指定列和值的字符集和排序规则，从而实现区分大小写的比较。请将utf8_bin替换为您要使用的字符集和排序规则。
使用REGEXP_LIKE函数
1SELECT * FROM `table` WHERE REGEXP_LIKE(`column`, &amp;#39;value&amp;#39;, &amp;#39;c&amp;#39;) 这个方法使用REGEXP_LIKE函数进行区分大小写的正则表达式匹配。第三个参数指定了匹配类型为c，表示区分大小写的匹配。
请注意，在执行区分大小写的字符串比较时，请确保您的列和值都使用了正确的字符集和排序规则。
总结 本文介绍了在MySQL中进行区分大小写的字符串比较的方法。通过使用BINARY关键字、COLLATE关键字和REGEXP_LIKE函数，我们可以实现区分大小写的字符串比较。在处理需要区分大小写的字符串比较时，请选择适合的方法来满足您的需求。希望本文对您有所帮助，让您了解如何在MySQL中进行区分大小写的字符串比较。
          
          
        
      </description>
    </item>
    
    <item>
      <title>SQL Server中的SELECT INTO现有表的插入操作</title>
      <link>https://www.techdocdb.com/posts/sql-server%E4%B8%AD%E7%9A%84select-into%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 06 Sep 2023 16:49:34 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/sql-server%E4%B8%AD%E7%9A%84select-into%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</guid>
      <description>
        
          
            摘要 在SQL Server中，如果您想要从一个表中选择某些字段，并将它们插入到现有表中，可以使用INSERT INTO SELECT语句。本教程将介绍如何执行这样的操作，并提供使用示例。
内容 如果您想要将一个表中的多行数据插入到另一个现有表中，有几种方法可以实现：
使用INSERT INTO SELECT语句插入数据 在SQL Server中，可以使用INSERT INTO SELECT语句将数据从一个表插入到另一个表。下面是一个示例，展示了如何执行这样的操作：
1INSERT INTO dbo.TableTwo 2SELECT col1, col2 3FROM dbo.TableOne 4WHERE col3 LIKE @search_key 如果目标表（TableTwo）中的列与SELECT语句中的列相匹配，则不必指定列名。但为了可读性和可扩展性的原因，最好始终指定列名。例如：
1INSERT INTO dbo.TableTwo 2(col1, col2) 3SELECT col1, col2 4FROM dbo.TableOne 5WHERE col3 LIKE @search_key 使用SELECT INTO创建新表并插入数据 另一种方法是使用SELECT INTO语句创建一个新表，并从另一个表中选择和插入数据。新表将以与SELECT语句中所选列相同的数据类型创建。
下面是一个示例，展示了如何执行这样的操作：
1SELECT col1, col2 2INTO dbo.TableTwo 3FROM dbo.TableOne 4WHERE col3 LIKE @search_key 使用特定列插入数据 如果目标表中有多个列，并且和源表中的列不完全匹配，可以使用以下示例中的方法在插入数据时指定列名：
1INSERT INTO dbo.TABLETWO 2(col1, col2) 3SELECT col1, col2 4FROM dbo.TABLEONE 5WHERE col3 LIKE @search_key 这个示例假设dbo.
          
          
        
      </description>
    </item>
    
    <item>
      <title>在SQL Server中获取表的列名</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8sql-server%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%A1%A8%E7%9A%84%E5%88%97%E5%90%8D/</link>
      <pubDate>Thu, 31 Aug 2023 08:51:47 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8sql-server%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%A1%A8%E7%9A%84%E5%88%97%E5%90%8D/</guid>
      <description>
        
          
            摘要 本文介绍如何通过查询获取SQL Server数据库表的所有列名。可以使用信息模式视图INFORMATION_SCHEMA.COLUMNS来实现此目的。
内容 可以使用以下查询语句查询获取SQL Server数据库表的列名：
1SELECT COLUMN_NAME 2FROM INFORMATION_SCHEMA.COLUMNS 3WHERE TABLE_NAME = &amp;#39;表名&amp;#39; 以上查询语句将返回指定表的所有列名。
总结 通过使用信息模式视图INFORMATION_SCHEMA.COLUMNS，可以查询获取SQL Server数据库表的列名。这种方法可以让您方便地获取表的所有列名，以便进行进一步的操作和处理。
参考文档：INFORMATION_SCHEMA.COLUMNS
          
          
        
      </description>
    </item>
    
    <item>
      <title>MySQL中 @variable 和 variable 有什么区别？</title>
      <link>https://www.techdocdb.com/posts/mysql%E4%B8%AD-@variable-%E5%92%8C-variable-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 25 Aug 2023 08:49:31 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/mysql%E4%B8%AD-@variable-%E5%92%8C-variable-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将介绍MySQL中 @variable 和 variable 之间的区别。我们将提供示例代码来说明这个问题。
内容 在MySQL中，@variable 表示一个用户定义的变量，你可以自定义变量名称。它们是松散类型的变量，在会话中可以初始化并保留其值，直到会话结束为止。
@variable 变量的前面带有 @ 符号，如 @var。你可以使用 SET 语句或在查询中初始化这个变量：
1SET @var = 1; 2 3SELECT @var2 := 2; 当你在MySQL中开发存储过程时，可以传递输入参数并声明局部变量：
1DELIMITER // 2 3CREATE PROCEDURE prc_test (var INT) 4BEGIN 5 DECLARE var2 INT; 6 SET var2 = 1; 7 SELECT var2; 8END; 9// 10 11DELIMITER ; 这些变量不需要任何前缀，并且仅在存储过程被调用时重新初始化，而会话特定的用户定义变量不会重新初始化。
总结 通过执行上述代码，你可以在MySQL中使用 @variable 和 variable 两种变量。@variable 是会话特定的用户定义变量，variable 是存储过程变量。它们在作用域和用途上有所不同。选择适合你需求的变量类型来进行 MySQL 编程，以提高代码的可读性和灵活性。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 MySQL 中临时禁用外键约束的方法</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8-mysql-%E4%B8%AD%E4%B8%B4%E6%97%B6%E7%A6%81%E7%94%A8%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 24 Aug 2023 14:57:45 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8-mysql-%E4%B8%AD%E4%B8%B4%E6%97%B6%E7%A6%81%E7%94%A8%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在 MySQL 中临时禁用约束。我们将使用示例代码来说明这个过程。
内容 在 MySQL 中，可以通过以下方法临时禁用约束：
使用DISABLE KEYS语句或 使用SET FOREIGN_KEY_CHECKS=0语句 在执行需要临时禁用约束的操作之前，使用其中一种方法来禁用约束。然后在操作完成后，再重新启用约束。
以下是示例代码：
1SET FOREIGN_KEY_CHECKS=0; 确保在操作完成后重新启用约束：
1SET FOREIGN_KEY_CHECKS=1; 总结 在 MySQL 中，可以使用DISABLE KEYS或SET FOREIGN_KEY_CHECKS=0语句来临时禁用外键约束。在需要临时禁用约束的操作前使用上述语句来禁用约束，操作完成后重新启用约束。使用这些方法，可以临时禁用约束来执行需要的操作，然后再恢复约束以确保数据的完整性。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
