<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grep on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/grep/</link>
    <description>Recent content in grep on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 12 Sep 2023 10:54:23 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/grep/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用grep递归搜索指定文件扩展名的内容</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8grep%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84%E5%86%85%E5%AE%B9/</link>
      <pubDate>Tue, 12 Sep 2023 10:54:23 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8grep%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84%E5%86%85%E5%AE%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用grep递归搜索指定文件扩展名的内容。我们将讨论你在尝试使用grep搜索指定目录时遇到的问题，并提供解决方案。
内容 在使用grep搜索指定目录时，可以限制搜索的文件扩展名。下面是几种解决方案：
使用--include参数 使用--include参数可以筛选要搜索的文件扩展名。下面是一个示例：
1grep -inr --include \*.h --include \*.cpp CP_Image ~/path[12345] | mailx -s GREP email@domain.example 使用find命令结合grep 使用find命令可以在搜索目录中查找指定文件扩展名的文件，然后使用grep命令在这些文件中搜索内容。下面是一个示例：
1find . -type f -name &amp;#39;*.h&amp;#39; -o -name &amp;#39;*.cpp&amp;#39; -exec grep &amp;#34;CP_Image&amp;#34; {} \; -print 这个方法使用find命令查找以.h和.cpp为扩展名的文件，然后使用grep命令在这些文件中搜索&amp;quot;CP_Image&amp;quot;。
使用tree命令结合grep 如果你安装了tree命令，可以使用tree命令生成目录树，然后使用grep命令在生成的目录树中搜索内容。下面是一个示例：
1tree -if | grep &amp;#39;\\.[ch]\\b&amp;#39; | xargs -n 1 grep -H &amp;#34;CP_Image&amp;#34; 这个方法首先使用tree命令生成目录树，并使用grep命令筛选出以.h和.cpp为扩展名的文件。然后使用xargs命令将每个文件作为参数传递给grep命令，搜索&amp;quot;CP_Image&amp;quot;。
无论使用哪种方法，都可以根据需求搜索指定文件扩展名的内容。选择适合你应用场景的方法即可。
总结 通过使用--include参数、find命令结合grep命令、或tree命令结合grep命令，你可以在搜索过程中限制搜索指定文件扩展名的内容。通过这些解决方案，你可以有效地搜索到满足条件的文件内容，提高了搜索的效率。了解和使用这些方法，有助于在使用grep时更加灵活和高效。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Bash中将stderr管道到另一个命令，而不是stdout</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8bash%E4%B8%AD%E5%B0%86stderr%E7%AE%A1%E9%81%93%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%80%8C%E4%B8%8D%E6%98%AFstdout/</link>
      <pubDate>Thu, 07 Sep 2023 10:59:15 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8bash%E4%B8%AD%E5%B0%86stderr%E7%AE%A1%E9%81%93%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%80%8C%E4%B8%8D%E6%98%AFstdout/</guid>
      <description>
        
          
            摘要 在Bash中，有时候我们想将stdout和stderr分别导向不同的命令进行处理。本教程将介绍如何使用命名管道(named pipes)实现这一目的，将stdout传递给一个命令，将stderr传递给另一个命令。
内容 要将stderr管道到另一个命令，可以按照以下步骤进行操作：
创建命名管道(named pipes)： 1mkfifo stdout-target 2mkfifo stderr-target 将stdout导向stdout-target管道，将stderr导向stderr-target管道，同时运行两个接收管道输入的命令： 1cat &amp;lt; stdout-target | command-for-stdout &amp;amp; 2cat &amp;lt; stderr-target | command-for-stderr &amp;amp; 运行主命令，将stdout导向stdout-target管道，将stderr导向stderr-target管道： 1main-command 1&amp;gt;stdout-target 2&amp;gt;stderr-target 运行完主命令后，记得删除命名管道： 1rm stdout-target stderr-target 总结 通过使用命名管道，我们可以将stdout和stderr分别导向不同的命令进行处理。这种方法比较灵活，可以将输出导向任何你想要的命令进行进一步处理。记得在使用命名管道后，及时删除它们，以避免占用过多的系统资源。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
