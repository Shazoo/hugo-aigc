<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dom on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/dom/</link>
    <description>Recent content in dom on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 07 Sep 2023 09:08:50 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/dom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用原生JavaScript选择具有&#34;data-xxx&#34;属性的所有元素（无需使用jQuery）</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9Fjavascript%E9%80%89%E6%8B%A9%E5%85%B7%E6%9C%89data-xxx%E5%B1%9E%E6%80%A7%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E6%97%A0%E9%9C%80%E4%BD%BF%E7%94%A8jquery/</link>
      <pubDate>Thu, 07 Sep 2023 09:08:50 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9Fjavascript%E9%80%89%E6%8B%A9%E5%85%B7%E6%9C%89data-xxx%E5%B1%9E%E6%80%A7%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E6%97%A0%E9%9C%80%E4%BD%BF%E7%94%A8jquery/</guid>
      <description>
        
          
            摘要 本教程将介绍使用原生JavaScript的方法，来选择具有特定&amp;quot;data-&amp;quot;属性的所有DOM元素。我们将演示几种方式来实现这个需求，并提供相应的代码示例。
内容 在使用原生JavaScript时，我们可以使用querySelectorAll方法来选择具有特定&amp;quot;data-&amp;quot;属性的所有元素。
使用querySelectorAll 您可以使用以下方式来选择带有特定&amp;quot;data-&amp;quot;属性的所有元素：
1document.querySelectorAll(&amp;#39;[data-foo]&amp;#39;); 这个方法会返回一个NodeList，其中包含了所有符合选择器条件的元素。
示例 让我们使用以下HTML代码作为示例：
1&amp;lt;p data-foo=&amp;#34;0&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; 2&amp;lt;br/&amp;gt; 3&amp;lt;h6 data-foo=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;/h6&amp;gt; 我们可以使用以下代码来选择所有具有&amp;quot;data-foo&amp;quot;属性的元素，并进行进一步的操作：
1var elements = document.querySelectorAll(&amp;#39;[data-foo]&amp;#39;); 2 3for (var i = 0; i &amp;lt; elements.length; i++) { 4 var element = elements[i]; 5 // 对符合条件的元素进行操作 6 // 例如，获取属性值：element.getAttribute(&amp;#39;data-foo&amp;#39;) 7} 总结 使用原生JavaScript的querySelectorAll方法，可以轻松选择具有特定&amp;quot;data-&amp;quot;属性的所有元素。这种方法与使用jQuery的方式类似，但不需要引入额外的库。根据具体需求，选择合适的方法来操作选中的元素。
          
          
        
      </description>
    </item>
    
    <item>
      <title>&#43;# 用JS解析HTML字符串</title>
      <link>https://www.techdocdb.com/posts/&#43;#-%E7%94%A8js%E8%A7%A3%E6%9E%90html%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 31 Aug 2023 08:42:27 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/&#43;#-%E7%94%A8js%E8%A7%A3%E6%9E%90html%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>
        
          
            摘要 本教程将介绍在JavaScript中解析包含HTML文本的字符串的方法。我们将讨论如何使用DOM API来解析HTML字符串，并通过示例演示其用法。
内容 您可以使用DOMParser对象的parseFromString方法来解析HTML字符串。该方法将HTML字符串作为参数，并返回一个Document对象，您可以像操作DOM一样操作它。
以下是一个示例：
1const parser = new DOMParser(); 2const htmlString = &amp;#39;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;Hello, World!&amp;lt;/div&amp;gt;&amp;#39;; 3const doc = parser.parseFromString(htmlString, &amp;#39;text/html&amp;#39;); 4 5const element = doc.querySelector(&amp;#39;.container&amp;#39;); 6console.log(element.textContent); // Output: Hello, World! 在这个例子中，我们创建一个DOMParser实例，然后使用parseFromString方法将HTML字符串解析为一个Document对象。我们可以使用querySelector方法来选择并操作解析后的DOM元素。
这种方法适用于在纯JavaScript环境中解析HTML字符串。在浏览器环境中，您也可以直接使用innerHTML来操作HTML字符串。
总结 通过使用DOMParser对象的parseFromString方法，您可以将HTML字符串解析为可以在JavaScript中操作的文档对象。这为您提供了灵活的方式来处理HTML字符串，并能够对其进行操作和访问。请记住，解析HTML字符串可能会引入安全风险，因此请谨慎处理不受信任的输入。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
