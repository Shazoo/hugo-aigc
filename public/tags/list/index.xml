<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>list on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/list/</link>
    <description>Recent content in list on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Sep 2023 05:52:14 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从pandas数据帧的列或行获取列表</title>
      <link>https://www.techdocdb.com/posts/%E4%BB%8Epandas%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%9A%84%E5%88%97%E6%88%96%E8%A1%8C%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8/</link>
      <pubDate>Mon, 04 Sep 2023 05:52:14 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BB%8Epandas%E6%95%B0%E6%8D%AE%E5%B8%A7%E7%9A%84%E5%88%97%E6%88%96%E8%A1%8C%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8/</guid>
      <description>
        
          
            摘要 本教程将介绍如何从pandas数据帧的列或行中获取列表。在使用pandas进行数据处理和分析时，经常需要将数据帧的特定列或行提取为列表，以便进行进一步的操作。本教程将给出几种方法来实现从数据帧提取列表的操作。
内容 在pandas中，可以使用以下几种方法从数据帧的列或行中获取列表：
方法一：使用tolist()方法
使用tolist()方法可以将pandas的Series对象转换为Python列表。例如：
1import pandas as pd 2 3data_dict = {&amp;#39;one&amp;#39;: pd.Series([1, 2, 3], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]), 4 &amp;#39;two&amp;#39;: pd.Series([1, 2, 3, 4], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])} 5 6df = pd.DataFrame(data_dict) 7 8column_one_list = df[&amp;#39;one&amp;#39;].tolist() 9 10print(column_one_list) 方法二：使用values属性
1column_one_list = df[&amp;#39;one&amp;#39;].values.tolist() 在上述示例中，我们使用values属性获取列的值，并使用tolist()方法将其转换为列表。
方法三：使用values属性和reshape()方法
1import numpy as np 2 3column_one_list = df[&amp;#39;one&amp;#39;].values.reshape(1, -1).ravel().tolist() 在上述示例中，我们使用values属性获取列的值，并使用reshape()方法将其重塑为numpy数组，然后使用ravel()方法展平数组，并最后使用tolist()方法将其转换为列表。
无论选择哪种方法，都可以从数据帧的列或行中获取列表，并进行后续的操作。
总结
在pandas中，我们可以使用tolist()方法或values属性配合tolist()方法来从数据帧的列或行中获取列表。根据实际需求选择合适的方法进行操作。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Java 5中如何合并两个列表</title>
      <link>https://www.techdocdb.com/posts/java-5%E4%B8%AD%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sun, 03 Sep 2023 21:42:23 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/java-5%E4%B8%AD%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8/</guid>
      <description>
        
          
            概述 本教程将介绍如何在Java 5中合并两个列表。我们将使用具体的例子来说明这一过程。
合并两个列表 如果您想要合并两个列表，可以尝试以下几种方法：
使用addAll()方法： 你可以使用addAll()方法将一个列表中的元素添加到另一个列表中。例如：
1List&amp;lt;String&amp;gt; newList = new ArrayList&amp;lt;String&amp;gt;(); 2newList.addAll 
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用Python对包含元组的列表进行排序</title>
      <link>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8python%E5%AF%B9%E5%8C%85%E5%90%AB%E5%85%83%E7%BB%84%E7%9A%84%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 28 Aug 2023 07:25:43 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E4%BD%BF%E7%94%A8python%E5%AF%B9%E5%8C%85%E5%90%AB%E5%85%83%E7%BB%84%E7%9A%84%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用Python对包含元组的列表进行排序。我们将展示多种方法，并附带相应的代码示例。
内容 要对包含元组的列表按照元组中的第二个元素（整数值）进行升序排序，有几种方法可供选择。
一种简单的方法是使用sorted()函数，并通过key关键字参数指定按照元组的第二个元素排序。下面是一个示例：
1sorted( 2 [(&amp;#39;abc&amp;#39;, 121), (&amp;#39;abc&amp;#39;, 231), (&amp;#39;abc&amp;#39;, 148), (&amp;#39;abc&amp;#39;, 221)], 3 key=lambda x: x[1] 4) key参数应该是一个从数据结构中提取可比较元素的函数。在这种情况下，可比较元素是元组的第二个元素，因此我们使用[1]来访问它。
另一种方法是使用operator.itemgetter(1)代替lambda函数。这是一个更快的方法，下面是一个示例：
1from operator import itemgetter 2 3data = [(&amp;#39;abc&amp;#39;, 121), (&amp;#39;abc&amp;#39;, 231), (&amp;#39;abc&amp;#39;, 148), (&amp;#39;abc&amp;#39;, 221)] 4sorted(data, key=itemgetter(1)) 这种方法更可读，并且在执行上更高效。
综上所述，我们可以使用上述方法对包含元组的列表进行排序。具体选择哪种方法取决于个人喜好和项目的要求。希望本教程对您理解如何使用Python对包含元组的列表进行排序有所帮助！
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
