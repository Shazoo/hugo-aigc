<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/ruby/</link>
    <description>Recent content in ruby on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2023 14:43:32 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding the Rails Authenticity Token</title>
      <link>https://www.techdocdb.com/posts/understanding-the-rails-authenticity-token/</link>
      <pubDate>Mon, 11 Sep 2023 14:43:32 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/understanding-the-rails-authenticity-token/</guid>
      <description>
        
          
            摘要 本文将介绍Rails中的Authenticity Token的作用以及原理。Authenticity Token用于防止跨站请求伪造（Cross-Site Request Forgery, CSRF）攻击。
内容 Rails中的Authenticity Token是用来保证表单提交请求来自于当前网站，而不是其他网站或者应用程序。
当用户访问一个创建、更新或删除资源的表单时，Rails应用程序会自动生成一个随机的authenticity_token，并将其存储在session中，并将其放入表单的隐藏字段中。当用户提交表单时，Rails会查找authenticity_token并将其与存储在session中的值进行比较，如果匹配则允许请求继续执行。
authenticity_token是存储在session中的，客户端无法知道其值。这样可以防止人们在没有在Rails应用程序内查看表单的情况下提交表单。想象一下，你正在使用A服务，你已经登录并一切正常。现在，想象一下你去使用B服务，并且你看到了一张你喜欢的图片，点击图片查看更大尺寸。现在，如果B服务中有一些恶意代码，它可能发送一个请求到你已登录的A服务，请求删除你的账户，如发送请求到http://serviceA.example/close_account。这就是所谓的CSRF（跨站请求伪造）攻击。
如果服务A使用authenticity_token，这种攻击就不再适用，因为服务B的请求不会包含正确的authenticity_token，请求将被拒绝。
Rails的API文档中描述了有关meta标签的详细信息：
CSRF保护通过protect_from_forgery方法启用，它会检查token，并在不匹配时重置session。对于新的Rails应用程序，默认情况下会生成此方法的调用。 token参数默认命名为authenticity_token。此token的名称和值必须添加到通过在HTML头部包含csrf_meta_tags，呈现表单的每个布局中。
需要注意的是，Rails只会验证非幂等请求（POST、PUT/PATCH和DELETE）。GET请求不会进行authenticity_token的验证。为什么呢？因为HTTP规范规定GET请求是幂等的，并且不应该在服务器端创建、更改或删除资源，请求应该是幂等的（如果您多次运行相同的命令，每次应该得到相同的结果）。
实际的实现比上面描述的要复杂一些，为了提供更好的安全性，Rails不会在每个表单中使用相同的存储的token。它也不会每次生成一个不同的token并将其存储起来。它会生成并存储一个加密哈希值，称为session，并在每次呈现页面时发放与存储的token相匹配的新的cryptographic token。具体的实现细节请参考request_forgery_protection.rb。
总结 在Rails中，使用authenticity_token来保护非幂等方法（POST、PUT/PATCH和DELETE）。同时，确保不允许任何可能修改服务器上资源的GET请求。
文章内容如上，详细介绍了Rails中的Authenticity Token的作用和原理。希望对你有所帮助！
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Ruby中如何按值删除数组中的一个元素</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8C%89%E5%80%BC%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 01 Sep 2023 08:25:54 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8C%89%E5%80%BC%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/</guid>
      <description>
        
          
            摘要 本教程将解释如何在Ruby中按值删除数组中的一个元素。我们将使用例子来演示不同的方法来删除数组中的特定元素。
方法介绍 在Ruby中，你可以使用以下几种方法来按值删除数组中的一个元素：
使用delete方法来按值删除元素。这种方法会删除所有匹配的元素。如果你不关心元素出现的次数，可以使用这种方法。
使用delete_at方法来按索引删除元素。如果你已经知道元素的索引，可以使用这种方法。
使用delete_if方法按条件删除元素。这种方法会根据指定的条件删除满足条件的所有元素。
使用reject方法创建一个新数组，其中包含条件为假的元素。
使用reject!方法与delete_if方法相同。数组可能不会立即改变，因为这个方法会调用块。
使用减法运算符-来删除一个值或多个值。这种方法会返回一个新的数组，其中不包含被删除的值。
以下是这些方法的具体示例：
1# 使用delete方法删除值为3的元素 2a = [2, 4, 6, 3, 8] 3a.delete(3) 4# =&amp;gt; 3 5puts a 6# =&amp;gt; [2, 4, 6, 8] 7 8# 使用delete_at方法按索引删除元素 9b = [2, 4, 6, 3, 8] 10b.delete_at(2) 11# =&amp;gt; 6 12puts b 13# =&amp;gt; [2, 4, 3, 8] 14 15# 使用delete_if方法按条件删除元素 16c = [1, 2, 5, 4, 9, 10, 11] 17c.delete_if { |n| n &amp;gt;= 10 } 18# =&amp;gt; [1, 2, 5, 4, 9] 19 20# 使用reject方法创建一个新数组，其中包含条件为假的元素 21d = [1, 2, 5, 4, 9, 10, 11] 22d.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Ruby on Rails中处理货币的最佳方法</title>
      <link>https://www.techdocdb.com/posts/ruby-on-rails%E4%B8%AD%E5%A4%84%E7%90%86%E8%B4%A7%E5%B8%81%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 31 Aug 2023 08:10:54 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/ruby-on-rails%E4%B8%AD%E5%A4%84%E7%90%86%E8%B4%A7%E5%B8%81%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将回答在Ruby on Rails中处理货币时的最佳方法。您将了解何时使用DECIMAL类型来处理货币，如何在视图中显示价格，并了解处理货币的一些建议。
内容 在处理货币时，一个常见的做法是使用DECIMAL类型。在您的数据库中，为您的价格列添加一个DECIMAL类型的字段。在迁移中，你可以像下面这样做：
1add_column :items, :price, :decimal, precision: 8, scale: 2 在Rails中，使用:decimal类型后，返回的数据类型是BigDecimal，对于货币计算非常有用。
如果您坚持使用整数类型，你需要在各处手动转换成BigDecimal，这会带来麻烦。
正如之前提到的，为了在视图中显示价格，你可以使用number_to_currency视图助手方法，比如：
1number_to_currency(price, unit: &amp;#34;€&amp;#34;) 下面总结一些和货币处理相关的问题和建议：
使用DECIMAL类型处理货币数据。 在显示价格时，使用number_to_currency视图助手方法。 根据需要自定义显示货币符号和精度。 建议使用BigDecimal进行货币计算。 如果您遇到需要使用整数表示货币的特殊情况，可以考虑上述提到的方法。 通过遵循这些指南，您可以在Ruby on Rails应用程序中处理货币数据并正确显示价格。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Ruby中为什么使用`rescue Exception =&gt; e`是不好的风格？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8rescue-exception-e%E6%98%AF%E4%B8%8D%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Mon, 28 Aug 2023 06:54:45 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8rescue-exception-e%E6%98%AF%E4%B8%8D%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%A0%BC/</guid>
      <description>
        
          
            摘要 rescue Exception =&amp;gt; e会捕获所有异常，这往往不是我们希望的行为。在处理异常时，应该只处理我们知道如何处理的异常。通常情况下，应该使用更具体的异常类进行捕获。如果需要访问异常对象，可以使用rescue =&amp;gt; e。
内容 Exception是Ruby异常继承层次结构的根，当使用rescue Exception时，实际上是捕获了所有的异常，包括SyntaxError、LoadError和Interrupt等子类。这样的捕获行为可能产生意想不到的结果。
例如，如果捕获了Interrupt异常，用户将无法使用CTRL+C来中止程序。捕获SignalException异常将导致程序无法正确响应信号，除非使用kill -9来终止程序。捕获SyntaxError意味着eval失败时不会触发错误。
以下示例程序展示了捕获Exception可能带来的问题：
1loop do 2 begin 3 sleep 1 4 eval &amp;#34;djsakru3924r9eiuorwju3498 += 5u84fior8u8t4ruyf8ihiure&amp;#34; 5 rescue Exception 6 puts &amp;#34;I refuse to fail or be stopped!&amp;#34; 7 end 8end 另外值得注意的是，捕获Exception并不是默认行为。在没有指定异常类的情况下，rescue语句默认会捕获StandardError。通常情况下，应该明确指定更具体的异常类，而不是捕获Exception。捕获Exception会扩大异常范围，可能导致严重的后果，并且使问题排查变得非常困难。
对于需要捕获StandardError并且需要访问异常对象的情况，可以使用下面的语法：
1begin 2 # ... 3rescue =&amp;gt; e 4 # ... 5end 这等效于：
1begin 2 # ... 3rescue StandardError =&amp;gt; e 4 # ... 5end 为了记录和报告目的而捕获Exception是少数几个可以接受的情况之一，在这种情况下，应该立即重新抛出异常，避免潜在的问题。
1begin 2 # .
          
          
        
      </description>
    </item>
    
    <item>
      <title>通过 UNIX 时间戳将时间转换为 Ruby DateTime 格式</title>
      <link>https://www.techdocdb.com/posts/%E9%80%9A%E8%BF%87-unix-%E6%97%B6%E9%97%B4%E6%88%B3%E5%B0%86%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2%E4%B8%BA-ruby-datetime-%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 25 Aug 2023 09:14:58 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E9%80%9A%E8%BF%87-unix-%E6%97%B6%E9%97%B4%E6%88%B3%E5%B0%86%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2%E4%B8%BA-ruby-datetime-%E6%A0%BC%E5%BC%8F/</guid>
      <description>
        
          
            摘要 本教程将向您展示如何将 UNIX 时间戳转换为 Ruby DateTime 格式。我们将使用示例代码来说明这个过程。
内容 要将 UNIX 时间戳转换为 Ruby DateTime 格式，可以使用 DateTime.strptime 方法。以下是一个示例代码：
1require &amp;#39;date&amp;#39; 2DateTime.strptime(&amp;#34;1318996912&amp;#34;, &amp;#39;%s&amp;#39;) 在上述代码中，我们将 UNIX 时间戳（&amp;quot;1318996912&amp;quot;）作为输入，通过%E 格式指定时间戳的格式为秒（%s）。然后，使用 DateTime.strptime 方法将时间戳转换为 Ruby DateTime 格式。
总结 使用 DateTime.strptime 方法，您可以将 UNIX 时间戳转换为 Ruby DateTime 格式。只需将时间戳作为输入，并使用正确的格式指定时间戳的格式。然后，您就可以在 Ruby 中将时间戳转换为 DateTime 格式，并进一步进行操作和处理。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何将 --no-ri --no-rdoc 设置为 gem install 的默认选项</title>
      <link>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%B0%86--no-ri--no-rdoc-%E8%AE%BE%E7%BD%AE%E4%B8%BA-gem-install-%E7%9A%84%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9/</link>
      <pubDate>Fri, 25 Aug 2023 09:00:46 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%A6%82%E4%BD%95%E5%B0%86--no-ri--no-rdoc-%E8%AE%BE%E7%BD%AE%E4%B8%BA-gem-install-%E7%9A%84%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何将 --no-ri --no-rdoc 设置为 gem install 的默认选项。我们将提供示例代码来说明这个问题。
内容 为了将 --no-ri --no-rdoc 设置为 gem install 的默认选项，你可以将以下配置行添加到本地的 ~/.gemrc 文件中（在用户的主目录中）：
1gem: --no-document 你也可以将此行添加到全局的 gemrc 配置文件中。
以下是具体的操作步骤：
通过以下命令编辑 .gemrc 文件： 1vi ~/.gemrc 在编辑器中插入以下内容： 1gem: --no-document 保存并退出编辑器。 经过以上操作，你就成功地将 --no-ri --no-rdoc 设置为 gem install 的默认选项。这样，在执行 gem install 命令时，将不会安装 RI 和 RDoc 文档。
总结 通过编辑 ~/.gemrc 文件并添加 gem: --no-document，你可以将 --no-ri --no-rdoc 设置为 gem install 命令的默认选项。这样，你就可以在安装 gem 时跳过安装文档，节省时间和空间。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
