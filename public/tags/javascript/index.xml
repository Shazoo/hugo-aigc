<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 技术分享站</title>
    <link>https://techdocdb.com/tags/javascript/</link>
    <description>Recent content in javascript on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Aug 2023 14:57:59 +0800</lastBuildDate><atom:link href="https://techdocdb.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Fetch API 进行 GET 请求设置查询字符串</title>
      <link>https://techdocdb.com/posts/%E4%BD%BF%E7%94%A8-fetch-api-%E8%BF%9B%E8%A1%8C-get-%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 24 Aug 2023 14:57:59 +0800</pubDate>
      
      <guid>https://techdocdb.com/posts/%E4%BD%BF%E7%94%A8-fetch-api-%E8%BF%9B%E8%A1%8C-get-%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>
        
          
            摘要 本教程将介绍如何使用 Fetch API 进行 GET 请求，并设置查询字符串。我们将使用示例代码来说明这个过程。
内容 使用 Fetch API 发起带有查询字符串的 GET 请求可以通过以下方式完成：
创建一个 URL 对象，并设置 URL 的基础地址。 使用 URL 的 searchParams 属性，设置查询参数。 使用 fetch 方法发送 GET 请求。 以下是一个示例代码：
1const url = new URL(&amp;#39;http://myapi.com/orders&amp;#39;); 2url.searchParams.set(&amp;#39;order_id&amp;#39;, &amp;#39;1&amp;#39;); 3fetch(url); 在上述示例中，我们首先创建一个 URL 对象，并设置其基础地址为&#39;http://myapi.com/orders&#39;。然后，通过设置URL对象的searchParams属性，将查询参数&#39;order_id&#39;设置为&#39;1&#39;。最后，使用fetch方法发送GET请求。
这种方式可以灵活地设置查询字符串，并且适用于任何有效的 URL 格式。
总结 使用 Fetch API 进行 GET 请求，并设置查询字符串可以用 URL 对象的 searchParams 属性来实现。首先，创建 URL 对象，并设置基础地址。然后，通过设置 URL 对象的 searchParams 属性，设置查询参数。最后，使用 fetch 方法发送 GET 请求。这种方式可以方便地设置和发送请求，并且可以适用于不同的 URL 和查询参数组合。
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何从JavaScript对象中删除项</title>
      <link>https://techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8Ejavascript%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%88%A0%E9%99%A4%E9%A1%B9/</link>
      <pubDate>Thu, 24 Aug 2023 13:52:29 +0800</pubDate>
      
      <guid>https://techdocdb.com/posts/%E5%A6%82%E4%BD%95%E4%BB%8Ejavascript%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%88%A0%E9%99%A4%E9%A1%B9/</guid>
      <description>
        
          
            摘要 本教程将介绍如何从JavaScript对象中删除项。我们将使用示例代码来说明这个过程。
内容 在JavaScript中，删除一个对象的项可以使用delete关键字。以下是一个示例：
1var test = {&amp;#39;red&amp;#39;:&amp;#39;#FF0000&amp;#39;, &amp;#39;blue&amp;#39;:&amp;#39;#0000FF&amp;#39;}; 2delete test.blue; // 或使用 delete test[&amp;#39;blue&amp;#39;]; 3console.log(test); 在上述示例中，我们定义了一个名为test的对象，其中包含了两个属性：red和blue。我们使用delete关键字删除了test对象中的blue属性。然后，我们使用console.log打印输出了删除后的test对象。在输出结果中，我们可以看到blue属性已从对象中删除。
总结 通过使用delete关键字，可以方便地从JavaScript对象中删除项。请注意，在删除项时需要使用正确的属性名称，可以直接使用.操作符或者[]操作符。删除后，可以通过打印输出对象来验证项是否已成功删除。
          
          
        
      </description>
    </item>
    
    <item>
      <title>阻止双击后文本选择的方法</title>
      <link>https://techdocdb.com/posts/%E9%98%BB%E6%AD%A2%E5%8F%8C%E5%87%BB%E5%90%8E%E6%96%87%E6%9C%AC%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 24 Aug 2023 12:33:25 +0800</pubDate>
      
      <guid>https://techdocdb.com/posts/%E9%98%BB%E6%AD%A2%E5%8F%8C%E5%87%BB%E5%90%8E%E6%96%87%E6%9C%AC%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在 JavaScript 中阻止双击后发生文本选择的方法。我们将使用示例代码来说明这个过程。
内容 双击一个元素会导致文本被选中，如果不希望发生这种选中，可以使用以下几种方法：
使用 CSS 属性 user-select: none 可以通过为元素添加 CSS 属性 user-select: none 来阻止双击后发生文本选择。以下是一个示例：
1.element { 2 user-select: none; 3} 在上述示例中，我们将 user-select: none 应用于 .element 元素，使其在双击后不会发生文本选择。
使用 JavaScript 事件处理 可以在双击事件的处理函数中阻止默认的文本选择行为。以下是一个示例：
1element.addEventListener(&amp;#39;dblclick&amp;#39;, function (event) { 2 event.preventDefault(); 3}); 在上述示例中，我们使用 addEventListener() 添加了一个双击事件的监听器，并在处理函数中使用 preventDefault() 方法阻止默认的文本选择行为。
综上所述，以上两种方法都可以用来阻止双击后发生文本选择。根据具体的需求和场景，选择适合的方法来实现阻止文本选择的效果。
总结 在 JavaScript 中，我们可以通过添加 CSS 属性 user-select: none 或在事件处理函数中使用 preventDefault() 方法来阻止双击后发生文本选择。根据具体情况选择适合的方法来实现阻止文本选择的效果。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
