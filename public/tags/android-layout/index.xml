<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android-layout on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/android-layout/</link>
    <description>Recent content in android-layout on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 08 Sep 2023 15:34:47 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/android-layout/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android Toolbar 标题居中和自定义字体</title>
      <link>https://www.techdocdb.com/posts/android-toolbar-%E6%A0%87%E9%A2%98%E5%B1%85%E4%B8%AD%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</link>
      <pubDate>Fri, 08 Sep 2023 15:34:47 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/android-toolbar-%E6%A0%87%E9%A2%98%E5%B1%85%E4%B8%AD%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</guid>
      <description>
        
          
            摘要：了解如何在 Android Toolbar 中居中标题并使用自定义字体。
要在 Android Toolbar 中使用自定义标题并居中显示，只需要记住 Toolbar 实际上就是一个特殊的 ViewGroup，所以你可以像下面这样添加一个自定义标题：
1&amp;lt;Toolbar 2 android:id=&amp;#34;@+id/toolbar_top&amp;#34; 3 android:layout_height=&amp;#34;wrap_content&amp;#34; 4 android:layout_width=&amp;#34;match_parent&amp;#34; 5 android:minHeight=&amp;#34;?android:attr/actionBarSize&amp;#34; 6 android:background=&amp;#34;@color/action_bar_bkgnd&amp;#34; 7 app:theme=&amp;#34;@style/ToolBarTheme&amp;#34;&amp;gt; 8 9 &amp;lt;TextView 10 android:layout_width=&amp;#34;wrap_content&amp;#34; 11 android:layout_height=&amp;#34;wrap_content&amp;#34; 12 android:text=&amp;#34;Toolbar Title&amp;#34; 13 android:layout_gravity=&amp;#34;center&amp;#34; 14 android:id=&amp;#34;@+id/toolbar_title&amp;#34; /&amp;gt; 15 16&amp;lt;/Toolbar&amp;gt; 这样你就可以自定义 TextView 的样式，因为它只是一个普通的 TextView。因此，在你的 Activity 中，你可以像这样访问标题：
1Toolbar toolbarTop = (Toolbar) findViewById(R.id.toolbar_top); 2TextView mTitle = (TextView) toolbarTop.findViewById(R.id.toolbar_title); 如果你想使用自定义字体，可以在样式中设置 TextView 的字体，比如：
1&amp;lt;style name=&amp;#34;ToolBarTheme&amp;#34; parent=&amp;#34;Theme.AppCompat.Light&amp;#34;&amp;gt; 2 &amp;lt;item name=&amp;#34;android:fontFamily&amp;#34;&amp;gt;@font/custom_font&amp;lt;/item&amp;gt; 3&amp;lt;/style&amp;gt; 除此之外，你还可以通过使用自定义 View 或通过使用反射来访问 Toolbar 内部的 TextView，但这些方法并不推荐使用。
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Android中如何使用`setCompoundDrawables()`显示组合Drawable</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8android%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8setcompounddrawables%E6%98%BE%E7%A4%BA%E7%BB%84%E5%90%88drawable/</link>
      <pubDate>Wed, 06 Sep 2023 16:21:07 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8android%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8setcompounddrawables%E6%98%BE%E7%A4%BA%E7%BB%84%E5%90%88drawable/</guid>
      <description>
        
          
            摘要 本教程将介绍如何在Android中使用setCompoundDrawables()方法显示组合Drawable。我们将提供几种不同的方法来实现这个目标，并提供代码示例。
内容 在Android中，我们可以通过几种不同的方法使用setCompoundDrawables()方法显示组合Drawable。下面是几种常用的方法：
方法一：使用setCompoundDrawables() 1Drawable myDrawable = getResources().getDrawable(R.drawable.btn); 2btn.setCompoundDrawables(myDrawable, null, null, null); 在这个例子中，我们使用getResources().getDrawable()方法获取Drawable对象，并使用setCompoundDrawables()方法将Drawable对象设置到指定的TextView上。
方法二：使用setBounds() 1Drawable myDrawable = getResources().getDrawable(R.drawable.btn); 2myDrawable.setBounds(0, 0, myDrawable.getIntrinsicWidth(), myDrawable.getIntrinsicHeight()); 3btn.setCompoundDrawables(myDrawable, null, null, null); 在这个例子中，我们使用getResources().getDrawable()方法获取Drawable对象，并使用setBounds()方法为Drawable对象设置边界。然后将Drawable对象设置到指定的TextView上。
这些方法可以帮助我们使用setCompoundDrawables()方法显示组合Drawable。根据具体需求选择合适的方法即可。
总结 在Android中，使用setCompoundDrawables()方法显示组合Drawable非常简单。通过获取Drawable对象并设置边界，然后将Drawable对象设置到相应的TextView上，我们可以轻松地实现组合Drawable的显示。选择合适的方法取决于具体的使用场景和需求。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
