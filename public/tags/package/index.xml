<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>package on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/package/</link>
    <description>Recent content in package on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 06 Sep 2023 14:35:31 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/package/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创建Python 3.3&#43;的软件包时是否需要__init__.py文件</title>
      <link>https://www.techdocdb.com/posts/%E5%88%9B%E5%BB%BApython-3.3&#43;%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81__init__.py%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 06 Sep 2023 14:35:31 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%88%9B%E5%BB%BApython-3.3&#43;%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81__init__.py%E6%96%87%E4%BB%B6/</guid>
      <description>
        
          
            摘要 在Python 3.3+中创建软件包时，是否需要一个空的__init__.py文件呢？本教程将回答这个问题。通过查看Python文档中关于软件包的说明，并提供示例代码来解释为什么在大多数情况下仍建议保留__init__.py文件。
内容 在Python中，创建软件包时，通常会在每个包目录中包含一个__init__.py文件。这个文件的存在通常用于指示该目录是一个包。然而，从Python 3.3版本开始，引入了隐式命名空间包的概念，允许在不包含__init__.py文件的情况下创建软件包。
然而，需要注意的是，大多数开发者仍然建议在创建软件包时保留空的__init__.py文件。这么做的原因有以下几点：
兼容性：保留__init__.py文件可以确保你的软件包与现有的源代码和项目指南保持兼容。
明确性：有__init__.py文件可以让人更清楚地知道所在目录是一个软件包，而不会产生误解或困惑。
只有在需要使用隐式命名空间包的特殊情况下，才建议省略__init__.py文件。隐式命名空间包主要用于在多个位置分散保存的库之间共享命名空间。这种情况下，你可以在不同的目录中使用命名空间包共享相同的命名空间，而无需在每个目录中都包含__init__.py文件。
以下是一个示例，演示了创建隐式命名空间包和常规包的区别：
1# 隐式命名空间包 2google_pubsub/ &amp;lt;- 包1 3 google/ &amp;lt;- 命名空间包（不包含__init__.py） 4 cloud/ &amp;lt;- 命名空间包（不包含__init__.py） 5 pubsub/ &amp;lt;- 常规包（包含__init__.py） 6 __init__.py &amp;lt;- 使该目录变为常规包所需的文件 7 foo.py 8 9google_storage/ &amp;lt;- 包2 10 google/ &amp;lt;- 命名空间包（不包含__init__.py） 11 cloud/ &amp;lt;- 命名空间包（不包含__init__.py） 12 storage/ &amp;lt;- 常规包（包含__init__.py） 13 __init__.py &amp;lt;- 使该目录变为常规包所需的文件 14 bar.py 需要注意的是，在使用find_packages()函数时，如果你希望包能够自动被发现，仍需要在每个目录中包含空的__init__.py文件。这是因为Python的工具（如mypy和pytest）在解析代码结构时，需要通过__init__.py文件来识别和解析包内部的模块和子包。如果没有这个文件，可能会导致一些奇怪的错误。
总结 在大多数情况下，建议在创建Python软件包时保留空的__init__.py文件。隐式命名空间包仅在需要与不同位置分散保存的库共享命名空间时使用。为了更好地兼容和遵循项目的约定，请始终保持空的__init__.py文件。
参考资料：
PEP 420 Python官方文档 - The import system 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
