<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exception on 技术分享站</title>
    <link>https://www.techdocdb.com/tags/exception/</link>
    <description>Recent content in exception on 技术分享站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 09 Sep 2023 17:08:27 +0800</lastBuildDate><atom:link href="https://www.techdocdb.com/tags/exception/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cannot delete directory with Directory.Delete(path, true)</title>
      <link>https://www.techdocdb.com/posts/cannot-delete-directory-with-directory.deletepath-true/</link>
      <pubDate>Sat, 09 Sep 2023 17:08:27 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/cannot-delete-directory-with-directory.deletepath-true/</guid>
      <description>
        
          
            在.NET 3.5中，使用Directory.Delete(myPath, true)进行递归删除目录时，可能会遇到以下问题:
1System.IO.IOException: The directory is not empty. 2 at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) 3 at System.IO.Directory.DeleteHelper(String fullPath, String userPath, Boolean recursive) 4 at System.IO.Directory.Delete(String fullPath, String userPath, Boolean recursive) 5 ... 根据我的理解，当目录中有文件被占用或存在权限问题时，这个方法会抛出异常。但通常情况下，它应该能够删除目录及其所有内容。
然而，有时会出现上述异常，即使指定了recursive参数为true。（我清楚地知道目录不是空的。）
这种情况是因为有其他线程或进程正在向目录中添加文件，导致删除过程中抛出异常。具体的执行顺序如下:
删除器进程 A:
清空目录。 删除（现在为空的）目录。 如果在步骤1和步骤2之间的某个时刻，有其他线程向目录中添加了一个文件，那么步骤2就会抛出上述异常。
解决这个问题的方法是找到锁定目录或文件的来源，并尝试消除这个锁定。你可以使用下面的代码来删除目录及其内容:
1public static void DeleteDirectory(string target_dir) 2{ 3 string[] files = Directory.GetFiles(target_dir); 4 string[] dirs = Directory.GetDirectories(target_dir); 5 6 foreach (string file in files) 7 { 8 File.SetAttributes(file, FileAttributes.Normal); 9 File.
          
          
        
      </description>
    </item>
    
    <item>
      <title>C#中的throw和throw ex的区别</title>
      <link>https://www.techdocdb.com/posts/c#%E4%B8%AD%E7%9A%84throw%E5%92%8Cthrow-ex%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 07 Sep 2023 17:57:58 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/c#%E4%B8%AD%E7%9A%84throw%E5%92%8Cthrow-ex%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>
        
          
            摘要 本教程将介绍C#中的throw和throw ex的区别。我们将讨论这两者之间的区别，并提供示例代码来说明它们的使用方法和效果。
throw和throw ex的区别 使用throw语句时，异常的堆栈跟踪将被保留，即异常的堆栈跟踪包括了异常抛出的位置以及所有调用此方法的上级方法的信息。
使用throw ex语句时，异常的堆栈跟踪将被重置。只有当前方法抛出的异常信息会被保留，上级方法的信息不会包含在异常堆栈跟踪中。
示例代码 下面的示例代码演示了throw和throw ex的区别：
1static void Main(string[] args) 2{ 3 try 4 { 5 Method1(); 6 } 7 catch (Exception ex) 8 { 9 Console.WriteLine(&amp;#34;Using throw:&amp;#34;); 10 Console.WriteLine(ex.StackTrace); 11 } 12 13 try 14 { 15 Method2(); 16 } 17 catch (Exception ex) 18 { 19 Console.WriteLine(&amp;#34;Using throw ex:&amp;#34;); 20 Console.WriteLine(ex.StackTrace); 21 } 22 23 Console.ReadKey(); 24} 25 26static void Method1() 27{ 28 try 29 { 30 throw new Exception(&amp;#34;Exception in Method1&amp;#34;); 31 } 32 catch (Exception ex) 33 { 34 throw; 35 } 36} 37 38static void Method2() 39{ 40 try 41 { 42 throw new Exception(&amp;#34;Exception in Method2&amp;#34;); 43 } 44 catch (Exception ex) 45 { 46 throw ex; 47 } 48} 输出结果如下：
          
          
        
      </description>
    </item>
    
    <item>
      <title>在C&#43;&#43;中使用`noexcept`</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8c&#43;&#43;%E4%B8%AD%E4%BD%BF%E7%94%A8noexcept/</link>
      <pubDate>Tue, 29 Aug 2023 08:34:13 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8c&#43;&#43;%E4%B8%AD%E4%BD%BF%E7%94%A8noexcept/</guid>
      <description>
        
          
            摘要 本教程将介绍在C++中使用noexcept关键字的情况。通过示例代码和解释，演示了noexcept的使用场景和效果。
内容 noexcept关键字是C++11引入的特性之一。它用于指示一个函数不会抛出异常。在实
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Ruby中为什么使用`rescue Exception =&gt; e`是不好的风格？</title>
      <link>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8rescue-exception-e%E6%98%AF%E4%B8%8D%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Mon, 28 Aug 2023 06:54:45 +0800</pubDate>
      
      <guid>https://www.techdocdb.com/posts/%E5%9C%A8ruby%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8rescue-exception-e%E6%98%AF%E4%B8%8D%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%A0%BC/</guid>
      <description>
        
          
            摘要 rescue Exception =&amp;gt; e会捕获所有异常，这往往不是我们希望的行为。在处理异常时，应该只处理我们知道如何处理的异常。通常情况下，应该使用更具体的异常类进行捕获。如果需要访问异常对象，可以使用rescue =&amp;gt; e。
内容 Exception是Ruby异常继承层次结构的根，当使用rescue Exception时，实际上是捕获了所有的异常，包括SyntaxError、LoadError和Interrupt等子类。这样的捕获行为可能产生意想不到的结果。
例如，如果捕获了Interrupt异常，用户将无法使用CTRL+C来中止程序。捕获SignalException异常将导致程序无法正确响应信号，除非使用kill -9来终止程序。捕获SyntaxError意味着eval失败时不会触发错误。
以下示例程序展示了捕获Exception可能带来的问题：
1loop do 2 begin 3 sleep 1 4 eval &amp;#34;djsakru3924r9eiuorwju3498 += 5u84fior8u8t4ruyf8ihiure&amp;#34; 5 rescue Exception 6 puts &amp;#34;I refuse to fail or be stopped!&amp;#34; 7 end 8end 另外值得注意的是，捕获Exception并不是默认行为。在没有指定异常类的情况下，rescue语句默认会捕获StandardError。通常情况下，应该明确指定更具体的异常类，而不是捕获Exception。捕获Exception会扩大异常范围，可能导致严重的后果，并且使问题排查变得非常困难。
对于需要捕获StandardError并且需要访问异常对象的情况，可以使用下面的语法：
1begin 2 # ... 3rescue =&amp;gt; e 4 # ... 5end 这等效于：
1begin 2 # ... 3rescue StandardError =&amp;gt; e 4 # ... 5end 为了记录和报告目的而捕获Exception是少数几个可以接受的情况之一，在这种情况下，应该立即重新抛出异常，避免潜在的问题。
1begin 2 # .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
